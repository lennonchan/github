//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AaAppsView.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "OgreEntity.h"
#include "OgreSubEntity.h"
#include "OgreTechnique.h"
#include "AaAppsView.h"
#include "ViewNode.h"
#include "Aabridge.h"
#include "DataBaseImpl.h"
#include "TranslationAnm.h"
#include "OgreMovableObject.h"

//#define _AABGVIEW_PARENTNAME_	"test_a03"
#define _AABGVIEW_PARENTNAME_	"Plane_vx01"

DataBaseImpl* AaAppsView::m_pDataBase = NULL;

AaViewport* AaAppsView::m_pAaViewPort = NULL;
AaAppsView::AaAppsView(const gkString& str,bool visible):RootView(visible),m_pParentNode(NULL),m_pTransAnm(NULL),m_pPreFocusNode(NULL)
{
	m_pParentNode = new ViewNode(Aabridge::getScene(),_AABGVIEW_PARENTNAME_);
	m_pTransAnm = new TranslationAnm(Aabridge::getScene(),m_pParentNode->getGameObj(),str);
	m_pTransAnm->setAnmListener(this);
	if(!m_pAaViewPort)
		m_pAaViewPort = new AaViewport(true);
	if (m_pParentNode != NULL)
	{
		m_pParentNode->getGameObj()->setVisible(false);
	}

	if(!m_pDataBase)
	{
		m_pDataBase = DataBaseImpl::getInstance();
	}
}

AaAppsView::~AaAppsView()
{
	ui_delete(m_pAaViewPort);
	ui_delete(m_pParentNode);
	ui_delete(m_pTransAnm);
	ui_delete(m_pDataBase);
}

DataBaseImpl* 
AaAppsView::getDataBase()
{
	return m_pDataBase;
}

ViewNode* 
AaAppsView::getParentNode()
{	
	return m_pParentNode;
}

void 
AaAppsView::setMoveVector(gkVector3 gVector,bool anm)
{
	_ASSERT_(m_pParentNode);
	static bool btemp = false;
	if(btemp)
		m_pTransAnm->finishAnimation();
	btemp = true;

	m_pTransAnm->To(m_pParentNode->getGameObj()->getPosition()+gVector,m_pParentNode->getGameObj()->getScale());
	anm?m_pTransAnm->Fly():m_pParentNode->getGameObj()->setPosition(m_pParentNode->getGameObj()->getPosition()+gVector);
}

ViewNode* 
AaAppsView::isHitViewNode(Ogre::RaySceneQueryResult& objArray)
{
	vector<AppUnit*>*  pVector = m_pDataBase->getAppsVector();

	unsigned int index = 0;

	while (index < pVector->size())
	{
		AppUnit* pApp = pVector->at(index);
		if(isObjInArray(objArray,pApp->getGameObj()))
			return pApp;
		index++;
	}
	return NULL;
}

void 
AaAppsView::setStickFocus(ViewNode* pNode)
{
	m_pPreFocusNode = pNode;
}

ViewNode* 
AaAppsView::getStickFocus()
{
	return m_pPreFocusNode;
}
bool 
AaAppsView::setFocus(ViewNode* node)
{
	RootView::setFocus(node);
	return true;
}

bool 
AaAppsView::setFocus(int index)
{
	AppUnit* pApp = m_pDataBase->getNodeByVindex(index);
	if(!pApp)
		return false;
	return setFocus(pApp);
}

void 
AaAppsView::upDateAnm(gkScalar time)
{
	if(m_pTransAnm)
	{
		m_pTransAnm->Update(time);
	}
}
void 
AaAppsView::onTranslationAnmFinish(TranslationAnm* pAnm)
{
	if(m_pTransAnm == pAnm)
	{
		if (m_pPreFocusNode)
		{
			setFocus(m_pPreFocusNode);
			m_pPreFocusNode = NULL;
		}
	}
}

void 
AaAppsView::showView()
{
	_ASSERT_(m_pDataBase);
	int size = m_pDataBase->getAppsNum();
	AppUnit* pApp  = NULL;
	for (int i = 0;i<size;i++)
	{
		pApp = m_pDataBase->getNodeByVindex(i);
		if(pApp)
			pApp->getGameObj()->setVisible(true);
	}
	//m_pAaViewPort->setViewportEnable(true);
}

void 
AaAppsView::hideView()
{
	_ASSERT_(m_pDataBase);
	int size = m_pDataBase->getAppsNum();
	AppUnit* pApp  = NULL;
//	m_pAaViewPort->setViewportEnable(false);
	for (int i = 0;i<size;i++)
	{
		pApp = m_pDataBase->getNodeByVindex(i);
		if(pApp->getGameObj())
			pApp->getGameObj()->setVisible(false);
	}
}