//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AppsViewUtil.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "AppsViewUtil.h"
#include "AaAppsViewImpl.h"
#include "ScrollViewImpl.h"
#include "LetterViewImpl.h"
#include "Aabridge.h"
#include "gkWindow.h"

#define  __UTILROW_SPACE_ 1.30366491f//1.2996f//	1.73198 - 0.39963 1.3918947f	// 默认行距
#define  __UTILOBJ_WIDTH_ 1.17f	  //	a16 数据 0.7908493f	// 
#define  _INVALIDE_POS_	gkVector3(-100,-100,-100)

AppsViewUtil* AppsViewUtil::m_This = NULL;

AppsViewUtil::AppsViewUtil():
		m_pAaViewImpl(NULL),m_pScrollImpl(NULL),m_pLetterImpl(NULL),m_Ratio(1.0f)
{
	m_This = this;
	m_ScrollData = tScrollData();
}

AppsViewUtil::~AppsViewUtil()
{
	m_This = NULL;
}

void 
AppsViewUtil::setAaViewImpl(AaAppsViewImpl* pImpl)
{
	m_pAaViewImpl = pImpl;
}

void 
AppsViewUtil::setScrollImpl(ScrollViewImpl* pImpl)
{
	m_pScrollImpl = pImpl;
}

void 
AppsViewUtil::setLetterImpl(LetterViewImpl* pImpl)
{
	m_pLetterImpl = pImpl;
}

ViewNode* 
AppsViewUtil::getCurrentFirstNode() // 获取当前显示位置的第一个node
{
	int num = (0.1+m_ScrollData.Position)/getAaViewRowSpace();
	return m_pAaViewImpl->getAppsList()->at(num*_APP_COLNUM_);
}

void 
AppsViewUtil::onAaNumChange()
{
	if(!m_pAaViewImpl)
		return;
	int appNum = m_pAaViewImpl->getAppNum();
	int rowNum = appNum/_APP_COLNUM_;
	if(appNum%_APP_COLNUM_ == 0)
		rowNum--;
	m_ScrollData.TotalSize = rowNum*getAaViewRowSpace()+__UTILOBJ_WIDTH_;
	m_ScrollData.ScreenSize = getClipScreenHight();
	if(m_ScrollData.ScreenSize >= m_ScrollData.TotalSize)
	{
		m_ScrollData.Position = 0;
		if(m_pScrollImpl)
			m_pScrollImpl->setShowScrollBarFlag(false);
	}
	else
	{
		if(m_pScrollImpl)
		{
			m_pScrollImpl->setShowScrollBarFlag(true);
		}
		m_ScrollData.Position = m_pAaViewImpl->getParentPos().z-m_pAaViewImpl->getParentRawPos().z;
		//m_ScrollData.Position = hight/(m_ScrollData.TotalSize - m_ScrollData.ScreenSize);
		//m_ScrollData.Position = m_ScrollData.Position>1?1:m_ScrollData.Position;
	}
	m_Ratio = m_pScrollImpl?m_pScrollImpl->getScrTrackLength()/m_ScrollData.TotalSize:1;
	//ScrollViewImpl::getInstance()->setSBRawPosition()
	m_pScrollImpl->setScrBarData(&m_ScrollData);
}

void 
AppsViewUtil::syncViews()
{
	_ASSERT_(m_pAaViewImpl);
	if(m_pScrollImpl && m_pAaViewImpl->getSortord() != ST_NAME)
	{
		//m_pScrollImpl->syncScrollBar();
	}
	else if(m_pLetterImpl)
		m_pLetterImpl->setCurrentLetter(getAaViewCurrentLetter());

}

void 
AppsViewUtil::setMoveVector(gkVector3 vt,bool anm,bool isPixUnit)			// 设置aaView的移动向量
{
	//if(isOutofRange(vt.z))
	//	vt.z = vt.z < 0? -m_ScrollData.Position:m_ScrollData.TotalSize-m_ScrollData.ScreenSize-m_ScrollData.Position;
	int rowNum = vt.z/getAaViewRowSpace();
	rowNum<0?nRowScroll(DOWN,-rowNum):nRowScroll(UP,rowNum);
}

void 
AppsViewUtil::nRowScroll(eFlyDirection drct,unsigned int num,bool anm)		// 翻一行	
{
	gkVector3 pos (0,0,0);
	if(drct == UP)
	{
		pos.z += num*getAaViewRowSpace();
	}
	else if(drct == DOWN)
	{
		pos.z -= num*getAaViewRowSpace();
	}
	if(m_ScrollData.Position + pos.z < 0)
	{
		pos.z = -m_ScrollData.Position;
	}
	else if (m_ScrollData.Position + pos.z + m_ScrollData.ScreenSize > m_ScrollData.TotalSize)
	{
		pos.z = m_ScrollData.TotalSize - m_ScrollData.ScreenSize - m_ScrollData.Position;
	}
	m_ScrollData.Position += pos.z;
	m_pAaViewImpl->setMoveVector(pos,anm);
	if(m_pScrollImpl)
		m_pScrollImpl->setScrBMoveVector(-pos*m_Ratio);
}

void 
AppsViewUtil::onePageScroll(eFlyDirection drct,bool anm)	// 翻一页面
{
	nRowScroll(drct,4,anm);
}

void 
AppsViewUtil::reset()
{
	m_pAaViewImpl->setMoveVector(-gkVector3(0,0,m_ScrollData.Position));
	if(m_pScrollImpl)
		m_pScrollImpl->setScrBMoveVector(gkVector3(0,0,m_ScrollData.Position)*m_Ratio);
	m_ScrollData.Position = 0;
}

void 
AppsViewUtil::setLetter(char ch,bool anm)
{
	if((ch < 'A' || ch > 'Z') && ( ch < 'a' || ch > 'z'))
		return;
	gkVector3 nodPos = getPosByChar(ch);
	if (nodPos == _INVALIDE_POS_)
	{
		gkPrintf("sort letters invalid psd \n");
		return;
		//return setLetter(ch++,anm);
	}
	if(m_pLetterImpl)
		m_pLetterImpl->setCurrentLetter(ch);
	gkScalar vectz = m_pAaViewImpl->getParentPos().z-nodPos.z-m_ScrollData.Position;
	vectz += vectz>=0?__UTILROW_SPACE_/2:-__UTILROW_SPACE_/2;
	int rowNum = vectz>=0?vectz/getAaViewRowSpace():-vectz/getAaViewRowSpace();
	nRowScroll(vectz>0?UP:DOWN,rowNum,true);
	//m_pAaViewImpl->setMoveVector(vect,true);
}

char 
AppsViewUtil::getAaViewCurrentLetter()
{
	gkVector3 vt = m_pAaViewImpl->getParentPos() - m_pAaViewImpl->getParentRawPos();
	int rowNum = (-vt.y)/_ROW_SPACE_;
	vector<AppUnit*>*  pVect = m_pAaViewImpl->getAppsList();
	return (*pVect)[rowNum*_APP_COLNUM_]->getChar()[0];
}

gkVector3 
AppsViewUtil::getPosByChar(char ch)
{
	_ASSERT_(ch >= 'A' && ch <= 'Z' || ch >=  'a' && ch <='z');
	
	vector<AppUnit*>*  pVect = m_pAaViewImpl->getAppsList();
	int size = pVect->size();
	AppUnit* pApp = NULL;
	for (int i = 0;i<size;i++)
	{
		pApp = pVect->at(i);
		const char  t = pApp->getChar()[0];
		if(ch == t|| ch == t+'A'-'a')
			return pApp->getGameObj()->getWorldPosition();
	}

	return _INVALIDE_POS_;
}

bool 
AppsViewUtil::isOutofRange(float yVec)
{
	if(m_ScrollData.ScreenSize +yVec < 0 || m_ScrollData.ScreenSize +yVec > m_ScrollData.TotalSize)
		return true;
	return false;
}

float 
AppsViewUtil::getAaViewRowSpace()
{
	/*if(m_pAaViewImpl->getAppsList()->size() < _APP_COLNUM_)
		return __UTILROW_SPACE_;
	gkVector3 pos0 = m_pAaViewImpl->getAppsList()->at(0)->getGameObj()->getWorldPosition();
	gkVector3 pos1 = m_pAaViewImpl->getAppsList()->at(_APP_COLNUM_)->getGameObj()->getWorldPosition();
	float temp = pos0.z - pos1.z;*/
	return __UTILROW_SPACE_;
}

eFlyDirection 
AppsViewUtil::getNodePosInClip(int vIndex)
{
	//m_ScrollData.Position+
	int rowNum = vIndex/_APP_COLNUM_;

	float ilength = rowNum*getAaViewRowSpace();//+m_pAaViewImpl->getParentScale().y;
	if(ilength < m_ScrollData.Position)// && )
		return DOWN;
	else if(ilength+__UTILOBJ_WIDTH_ > m_ScrollData.Position+m_ScrollData.ScreenSize+0.01f)
		return UP;
	else
		return NON;
}

float 
AppsViewUtil::getClipScreenHight()
{
	return 3*getAaViewRowSpace()+__UTILOBJ_WIDTH_;
}

AppsViewUtil* 
AppsViewUtil::getInstance()
{
	return m_This?m_This:new AppsViewUtil();
}