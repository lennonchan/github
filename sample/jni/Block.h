//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Block.h
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#if !defined(_BLOCK_H)
#define _BLOCK_H

#include <gkGameObject.h>
#include "TranslationAnm.h"
#include "AppUnitShortcut.h"
#include "LauncherScene.h"

#define _BLOCK_EDITMENU_ANM_ 3

class AppUnitShortcut;
class ViewNode;
class Block :public BlenderAnmInterface
{

public:
	Block(gkScene*);
	virtual ~Block();

	virtual BlockEnum getBlockEnum() = 0; //命名每一个派生block的唯一的index
	virtual bool flyfocus(ViewNode* pDestFocusNode);	// 屏蔽三个版的动画
	virtual bool flyfocus(eFlyDirection e,ViewNode* pFocusNode = NULL);  //
	virtual void onLoseFocus();
	bool deleteLinker();
	void refreshLinker();
	virtual void instanceBlock();
	bool isBlockInstanced();
	void setBlenderAnm(BlenderAnimation*);
	BlenderAnimation* getBlenderAnm();
	int getShortcutsNum();
	static gkGameObject* getFocus();
	static gkGameObject* getEditFocus();
	static void setFocusEditVisable(bool vsb);
	static bool getFocusEditVisable();
	static void setFocusVisible(bool vsb);
	static bool getFocusVisible();
	static TranslationAnm* getFocusAnm();
	static TranslationAnm* getFocusEditAnm();
	static BlenderAnimation * getMenuFocusAnm();
	static void setMenuFocusAnm(BlenderAnimation * bldAni);
	static void setMenuFocusFlag(bool flag);
	static bool getMenuFocusFlag();
	AppUnitShortcut* getShortcutByApp(AppUnit* pApp);
	bool setAppByIndex(int index,AppUnit* pApp);
	void setMaskVisible(bool vsb = true);
	void setXVisible(bool vsb = true);				// 隐藏所有的“X”
	void tidyApps(AppUnitShortcut* startApp=NULL);		// 整理app，将排在后面的app调整到前面的空缺位置
	virtual int getVacantPosParentID(){return -1;};
	int getVacantPosID();
	virtual void setAllVisible(bool visible);

	void setAnmFrameScope(int,int);
	bool playAnimation();
	gkGameObject* getBlockParentPlane();
	AppUnitShortcut** getShortcutsList();
	AppUnitShortcut*  getCurrentFocus();
	virtual ViewNode* isHitGameObj(Ogre::RaySceneQueryResult& objArray);
	void setRawData(gkVector3 pos);
	void writeDownRawData();
	gkVector3 getRawData();

	virtual int getMenuFlag();
	virtual gkVector3 getMenuPos(int index);

	// edit menu
	
	bool flyfocusInEditMenu(eFlyDirection e, gkGameObject * pDes = NULL);
	bool flyfocusInEditMenu(gkGameObject * pDes);

	bool flyfocusImp(gkGameObject * pDes);
	bool flyfocusImp(gkGameObject * pDes, gkVector3 pos, gkVector3 scale);

	gkGameObject** getObjectInEditMenu();
	BlenderAnimation ** getBlnAniInEditMenu();

	gkGameObject** getMenuObjList();

	virtual void showMenu();
	virtual void hideMenu(BlenderAnmInterface* pInterface = NULL);

	int getMenuItemNum();
	void setMenuItemNum(int menuItemNum);

	int getMenuItemFocusIdx();
	void setMenuItemFocusIdx(int menuItemFocusIdx);

	virtual void setBlockVisible(bool isBlockVisable);

	virtual bool isDelete();
	virtual void addMyBlock();
	virtual void deleteMyBlock();
	virtual bool setMyBlockFocusVisible(bool isVisible);
	virtual gkGameObject * getAddBlockSymbol();
private:
	void tidyApps(int index);		// 整理app，将排在后面的app调整到前面的空缺位置
protected:
	virtual void initEditMenu(){};
	virtual void onBlenderAnmFinish(BlenderAnimation* p,int s,int e);
protected:
	int m_FocusIndex;
	int m_ShortCutNum;
	bool m_InstanceFlag;
	AppUnitShortcut** m_ppShortcutList;
	gkScene*   m_pScene;
	gkGameObject* m_BlockParentPlane;
	gkGameObject* m_pMaskPlane;
	BlenderAnimation* m_pBldAnm;
	gkVector3 m_BlockPos;			// 记录block的原始位置，解决在做ogre动画是播放不到位的bug
	static gkGameObject* m_pFocus;
	static TranslationAnm* pFocus;
	AppUnitShortcut* m_pCurrentFocus;

	// edit menu
	int m_MenuItemNum;             //每个block下的menu items数量
	int m_MenuItemFocus;          //menu item focus的idx
	gkGameObject * m_CurrentFocus_EM;
	bool m_MenuVisibleFlag;
	BlenderAnimation** m_ppMenuAnmList;
	gkGameObject** m_ppMenuObjList;
	BlenderAnmInterface* m_pBldAnmInterface;
	gkGameObject * m_pCurrentFocus_EM;

	static gkGameObject * m_pFocusEditMenuFocusObj;
	static TranslationAnm * m_pFocusEditMenuFocusAni;
	static BlenderAnimation * m_pMenuFocusAnm;
	static bool isMenuFlag;
};

#endif  //_BLOCK_H
