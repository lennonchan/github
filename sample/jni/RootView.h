//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Rootview.h
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#if !defined(_ROOTVIEW_H)
#define _ROOTVIEW_H

#include <gkMathUtils.h>
#include "Util.h"

class ViewNode;
class TranslationAnm;
class TranslationAnmInterface;
class RootView {
	friend class AaBackgroundview;
public:
	RootView(bool visible = true);
	virtual ~RootView();
	virtual bool setFocus(ViewNode* node,bool isCircle = false);
	virtual bool setFocus(int index,bool isCircle = false);
	
	virtual ViewNode* getFocus();
	virtual RootView* setTAnmInterface(TranslationAnmInterface* interf);
	virtual void loseViewFocus() = 0;

	static void onTick(gkScalar time);
	static bool isFocusNode(ViewNode* pNode);

	virtual void setViewNodeNum(int n);
	virtual int getViewNodeNum();
	
	virtual ViewNode** getViewNodeList();
	virtual void setViewNodeList(ViewNode**);

	virtual void setVisible(bool visible = true);
	virtual bool getVisible();
	virtual ViewNode* isHitViewNode(Ogre::RaySceneQueryResult& objArray);
	static bool isInvolvedViewNode(ViewNode* pList[],ViewNode* pCurrent,const int length);
	static void setFocusVisible(bool vsb = true);	// 设置焦点框是否可见
	static int getCircleTextureID();
	static int getRectTextureID();
	static gkGameObject * getAaFocusObj();
private:
	virtual void showView();
	virtual void hideView();
protected:
	static TranslationAnm* pAaFocus;
	static gkGameObject* m_pFocusObj;
private:
	bool m_visible;
	int m_iNodeNum;  //每个区域的node数量
	ViewNode* m_pFocusNode;
	ViewNode** m_ppViewNodeList; //保存派生view类中的blender模型
	TranslationAnmInterface* m_pTAnmInterFace;
	static int  m_RectTextureID;
	static int  m_CircleTextureID;
};

#endif  //_ROOTVIEW_H
