//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Focus.h
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#if !defined(_TRANSLATIONANM_H)
#define _TRANSLATIONANM_H

#include <gkScene.h>
#include <gkGameObject.h>
#include <gkMathUtils.h>
#include <OgreAnimationState.h>
#include <Logic/gkLogicNode.h>

class TranslationAnmInterface;
class TranslationAnm
{
public:
	TranslationAnm(gkScene* scene,gkGameObject* pObj,const gkString& name ="ttt",gkVector3 flyoffset=gkVector3(0,0,0),gkVector3 posoffset=gkVector3(0,0,0));
	~TranslationAnm();
	void setGameObject(gkGameObject * obj);
	void From (const gkVector3& pos, const gkVector3&scale);
	void To (const gkVector3&pos, const gkVector3&scale,bool replaceFrom = true);
	void Update(gkScalar time);
	void Fly();
	void finishAnimation();
	bool getAnimationEnable();
	void setAnmListener(TranslationAnmInterface*);
	void setVisible(bool vsb);
	bool getVisible();
	gkGameObject* m_pGameObj;
private:
	void setCurrentSecne();
private:
	gkScene*   m_scene;
	
	Ogre::Animation * m_pAnm;
	Ogre::AnimationState* m_pAnmState;
	Ogre::NodeAnimationTrack* m_pAnmTrack;
	TranslationAnmInterface*  m_pAnmListener;

	gkVector3 m_FromPos;
	gkVector3 m_FromScale;
	gkVector3 m_ToPos;
	gkVector3 m_ToScale;

	bool m_AnmEnable;
	gkString m_sAnmName;
	gkVector3 m_AnmFlyOffset;
	gkVector3 m_AnmPosOffset;
};

#endif  //_TRANSLATIONANM_H
