//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : FocusMove N+.cpp
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#include "BlenderAnimation.h"
#include "blenderAnmInterface.h"
#include "Util.h"
#include <Animation/gkAnimationManager.h>

BlenderAnimation::BlenderAnimation(gkScene* pScene,gkGameObject* pGameObj,const gkHashedString& name,BlenderAnmInterface* pInterface /*= NULL*/)
:m_pScene(pScene),m_pGameObj(pGameObj),m_pAnm(NULL),m_pAnmPlayer(NULL),m_interface(pInterface),m_pCallback(NULL),
m_AnmStartFrame(0),m_AnmEndFrame(0),m_isPlaying(false)
{
	if(m_pScene&&m_pGameObj)
	{
		//第一次的animationPlayer为空
		m_pAnmPlayer = m_pGameObj->getAnimationPlayer(name);
		m_pAnm = gkAnimationManager::getSingleton().getAnimation(gkResourceName(name));
		if(!m_pAnmPlayer && m_pAnm)
		{
			m_pCallback = new akAnimationCallback<BlenderAnimation,&BlenderAnimation::onAnmFinish>(this);
			m_pAnmPlayer = m_pGameObj->addAnimation(m_pAnm, name);
			m_pAnmPlayer->setAnimationFinishedCallback(m_pCallback);
		}
	}
}

BlenderAnimation::~BlenderAnimation()
{
	ui_delete(m_pCallback);
	m_pScene = NULL;
	m_pGameObj = NULL;
	m_pAnm = NULL;
	m_pAnmPlayer = NULL;
	m_interface = NULL;
}

void
BlenderAnimation::setFrameTime(int time)
{
	if(!m_pAnmPlayer)
		return;
	m_pAnmPlayer->enable(true);
	m_pAnmPlayer->setTimePosition(time/24.0);	//函数功能暂时没实现
	m_pAnmPlayer->evaluate(0);
	m_pAnmPlayer->enable(false);
}

bool 
BlenderAnimation::setFrameScope(int start, int end) 
{
	//int temp = end -start;
	if(!m_pGameObj || !m_pAnmPlayer)
		return false;
	//start = start-m_pAnm->getInternal()->getStartFrame();
	//end = start + temp;

	m_pAnmPlayer->setTimeStartPosition(start);
	m_pAnmPlayer->setTimeEndPosition(end);
	m_AnmStartFrame = start;
	m_AnmEndFrame = end;
	return true;
}

bool 
BlenderAnimation::play(const akAnimationEvalMode& anmEvalMode ) 
{
	if(!m_pAnmPlayer || !m_pGameObj || !m_pScene || m_pAnmPlayer->getTimeEndPosition() < 0)
		return false;
	m_pAnmPlayer->setMode(anmEvalMode);
	m_pAnmPlayer->enable(true);
	m_pGameObj->getAnimationBlender().push(m_pAnmPlayer,0,anmEvalMode,0);
	m_pScene->pushAnimationUpdate(m_pGameObj);
	m_isPlaying = true;
	return true;
}

bool 
BlenderAnimation::isPlaying()
{
	_ASSERT_(m_pAnmPlayer);
	return m_isPlaying&&!m_pAnmPlayer->isInvalid();
}

void 
BlenderAnimation::finishAnm()
{
	_ASSERT_(m_pGameObj&&m_pAnmPlayer);
	m_pGameObj->removeAnmPlayer(m_pAnmPlayer);
	//m_pAnmPlayer->setFinished();
}

void 
BlenderAnimation::setGameObj(gkGameObject* gameObj)
{
	m_pGameObj = gameObj;
	m_pAnmPlayer->setObject(m_pGameObj);
}

void 
BlenderAnimation::setAnmInterface(BlenderAnmInterface* pinterface)
{
	m_interface = pinterface;
}

void  
BlenderAnimation::onAnmFinish(void)
{
 	if(m_pGameObj->getActAnimationNum() <= 0)
		m_pScene->removeAnimationUpdate(m_pGameObj);
 	m_isPlaying = false;
	if (m_interface)
	{
		m_interface->onBlenderAnmFinish(this,m_AnmStartFrame,m_AnmEndFrame);
	}
}