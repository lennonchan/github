//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LetterViewImpl.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//

#include "LetterViewImpl.h"
#include "LetterView.h"
#include "AppsViewUtil.h"
#include "FocusMovePath.h"

#define _AALETTER_COLNUM_	1
#define _AALETTER_A_INDEX_	0

LetterViewImpl::LetterViewImpl():m_pViewUtil(NULL)
{
	m_pLetterView = new LetterView();
	setRootView(m_pLetterView);
	m_pViewUtil = AppsViewUtil::getInstance();
}

LetterViewImpl::~LetterViewImpl() 
{
	ui_delete(m_pLetterView);
}

//void 
//LetterViewImpl::setLetterViewVisible(bool v)
//{
//	m_pLetterView->setVisible(v);
//}
//
//bool 
//LetterViewImpl::getLetterViewVisible()
//{
//	return m_pLetterView->getVisible();
//}

char 
LetterViewImpl::getHitLetter(Ogre::RaySceneQueryResult& objArray)				// return NULL or ‘#’ or ‘A’~‘Z’
{
	return viewNodeToChar(m_pLetterView->isHitViewNode(objArray));
}

char 
LetterViewImpl::getCurrentLetter()			// 获取当前焦点所在的字母
{
	return viewNodeToChar(m_pLetterView->getFocus());
}

void 
LetterViewImpl::setCurrentLetter(char chr)	// 设置点击到的字母
{
	ViewNode* pNode = charToViewNode(chr);
	if (pNode)
	{
		m_pLetterView->setFocus(pNode);
	}
}

char 
LetterViewImpl::viewNodeToChar(ViewNode* pNode)
{
	if(!pNode || !getViewVisible())
		return NULL;
	ViewNode** ppNode = m_pLetterView->getViewNodeList();
	int size = m_pLetterView->getViewNodeNum();
	for (int i = _AALETTER_A_INDEX_ ;i<size;i++)
	{
		if (ppNode[i] == pNode)
		{
			return i-_AALETTER_A_INDEX_+'A';
		}
	}
	return NULL;
}

ViewNode* 
LetterViewImpl::charToViewNode(char ch)
{
	if(ch >= 'A'&&ch <= 'Z')
		return m_pLetterView->getViewNodeList()[ch-'A'+_AALETTER_A_INDEX_];
	return NULL;
}

bool 
LetterViewImpl::moveFocus(eFlyDirection direct)	// 移动focus
{
	ViewNode* pResult = FocusMovePath::getNextFocusNode_AA(m_pLetterView->getViewNodeList(),
		m_pLetterView->getViewNodeNum(),m_pLetterView->getFocus()->getMinIndex(),direct,_AALETTER_COLNUM_);
	if (pResult)
	{
		m_pLetterView->setFocus(pResult);
		return true;
	}
	return false;
}

bool 
LetterViewImpl::MoveViewFocus(RootViewImpl* pPreImpl,eFlyDirection direction)
{
	_ASSERT_(pPreImpl&&m_pLetterView);

	pPreImpl->onLoseFocus();
	m_pLetterView->setFocus(_AALETTER_A_INDEX_);

	return true;
}

bool 
LetterViewImpl::setViewNodeFocus(ViewNode* pNode)		// 设置viewNode* 为当前focus
{
	return m_pLetterView->setFocus(pNode);
}

ViewNode* 
LetterViewImpl::getCurrentViewNode()
{
	return m_pLetterView->getFocus();
}

void 
LetterViewImpl::onClickViewNode(ViewNode* pNode)
{
	
}
void 
LetterViewImpl::onLoseFocus()
{

}
void 
LetterViewImpl::onHitCurrentNode()
{
	onClickViewNode(getCurrentViewNode());
}

UT_IMPLEMENT_SINGLETON(LetterViewImpl);