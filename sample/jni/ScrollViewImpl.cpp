//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ScrollbarView.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "ScrollViewImpl.h"
#include "AppsViewUtil.h"

#define _SBIMPL_TRACK_LENGTH_  4.75246//2.375
#define _SBIMPL_SB_LENGTH_	   1.14309//0.565
#define _SBIMPL_SB_SCALEY_	   0.565//0.565

#define _SBIMPL_SB_SCALE_		gkVector3(0.02907,0.565,0.543)	
#define _SBIMPL_SB_POSITION_	gkVector3(6.02881,-4.01000,1.58852)
ScrollViewImpl* ScrollViewImpl::m_pInstance = NULL;
ScrollViewImpl::ScrollViewImpl():
	m_pScrollView(NULL),m_pViewUtil(NULL),m_SbMinPos(0),m_SbMaxPos(0),m_ShowScrollBar(true),m_ScrollbarLength(0.0f),
		m_ScrollCurrentPos(0,0,0),m_ScrollRowPos(0,0,0)
{
	m_pScrollView = new ScrollbarView();
	setRootView(m_pScrollView);
	//m_ScrollCurrentPos = m_pScrollView->getScrollBarPosition();
	//m_ScrollRowPos = m_pScrollView->getScrollBarPosition();
	//m_ScrData = tScrollData();
	m_pViewUtil = AppsViewUtil::getInstance();
	m_pInstance = this;
}

ScrollViewImpl::~ScrollViewImpl() 
{
	ui_delete(m_pScrollView);
}

ScrollViewImpl* 
ScrollViewImpl::getInstance()
{
	return m_pInstance?m_pInstance:new ScrollViewImpl();
}

bool 
ScrollViewImpl::isHitScrollBar(Ogre::RaySceneQueryResult& result)
{
	return m_pScrollView->isHitScrollBar(result);
}

bool 
ScrollViewImpl::isHitScrollBarTrack(Ogre::RaySceneQueryResult& result)
{
	return m_pScrollView->isHitScrollTrack(result);
}

bool 
ScrollViewImpl::setScrBMoveVectorOnY(int yVector,bool isPixVector)			// 设置滚动条在Y轴上的移动向量
{
	if (isPixVector)
	{
		return true;
	}
	return setScrBMoveVector(gkVector3(0,yVector,0));
}

bool 
ScrollViewImpl::setScrBMoveVector(gkVector3 gVector,bool isPixVector)		// 设置滚动条的移动向量
{
	if (isPixVector)
	{
		return true;
	}
	m_ScrollCurrentPos+=gVector;

	/*if (tempPos.y < m_SbMinPos || gVector.y > m_SbMaxPos)
	{
		return false;
	}*/

	m_pScrollView->setScrollBarPosition(m_ScrollCurrentPos);
	return true;
}

bool 
ScrollViewImpl::setScrBPos(gkVector3 gkPos)		// 设置scroll bar的位置
{
	if (gkPos.y < m_SbMinPos || gkPos.y > m_SbMaxPos)
	{
		return false;
	}

	m_pScrollView->setScrollBarPosition(gkPos);
	return true;
}

gkVector3 
ScrollViewImpl::getScrBYPos()						// 获取scroll bar的位置
{
	return m_pScrollView->getScrollBarPosition();
}

// void 
// ScrollViewImpl::setSBRawPosition(gkVector3 pos)
// {
// 	//m_pScrollView->setSBRawPosition(pos);
// }

void 
ScrollViewImpl::setViewVisible(bool vsb)
{
	if(m_ShowScrollBar)
		RootViewImpl::setViewVisible(vsb);
}

void 
ScrollViewImpl::setShowScrollBarFlag(bool bFlag)		// 设置是否需要显示滚动条
{
	m_ShowScrollBar = bFlag;
}

void 
ScrollViewImpl::setScrollBarToCurPos()
{
	if(m_ShowScrollBar)
		m_pScrollView->setScrollBarPosition(m_ScrollCurrentPos);
}

void 
ScrollViewImpl::setScrollBarToRowPos()
{
	if(!m_ShowScrollBar)
		return;
	m_pScrollView->setScrollBarPosition(m_ScrollRowPos);
	m_ScrollCurrentPos = m_ScrollRowPos;
}
//bool 
//ScrollViewImpl::setScrBarPosition(float f)		// 范围 0~1
//{
//	gkVector3 temp = m_pScrollView->getSBRawPosition();
//	gkVector3 temppos = RatioToPos(f);
//	if (temp == temppos )
//	{
//		return false;
//	}
//	m_pScrollView->setScrollBarPosition(temppos);
//	return true;
//}

//float 
//ScrollViewImpl::getScrBarPosition()
//{
//	return PosToRatio(m_pScrollView->getScrollBarPosition());
//}

float 
ScrollViewImpl::getScrTrackLength()
{
	return _SBIMPL_TRACK_LENGTH_;
}

void 
ScrollViewImpl::setScrollBarScale(gkVector3 gScale)
{
	m_pScrollView->setScrollBarScale(gScale);
}

void 
ScrollViewImpl::setScrollBarPosition(gkVector3 gPosition)
{
	m_pScrollView->setScrollBarPosition(gPosition);
}

void 
ScrollViewImpl::syncScrollBar()
{
	if(!m_ShowScrollBar)
		return;
	m_pScrollView->setScrollBarScale(m_ScrollScale);
	m_pScrollView->setScrollBarPosition(m_ScrollCurrentPos);
}

void 
ScrollViewImpl::setScrBarData(tScrollData* pdata)
{
	if(!m_ShowScrollBar)
		return;

	_ASSERT_(pdata);
	//m_ScrData = (*pdata);
	gkVector3 scale = _SBIMPL_SB_SCALE_;
	gkVector3 pos = _SBIMPL_SB_POSITION_;

	m_ScrollbarLength = pdata->ScreenSize*_SBIMPL_TRACK_LENGTH_/pdata->TotalSize;
	pos.z -= (m_ScrollbarLength - _SBIMPL_SB_LENGTH_)/2;
	pos.z -=  pdata->Position/(pdata->TotalSize - pdata->ScreenSize)*(_SBIMPL_TRACK_LENGTH_ - m_ScrollbarLength);

	scale.y = m_ScrollbarLength*_SBIMPL_SB_SCALEY_/_SBIMPL_SB_LENGTH_;
	//pos.z += scale.z/2+pdata->Position*_SBIMPL_TRACK_LENGTH_;
	m_ScrollCurrentPos = pos;
	m_ScrollScale = scale;
	m_pScrollView->setScrollBarScale(scale);
	m_pScrollView->setScrollBarPosition(pos);
	//m_pScrollView->setSBRawPosition(pos);
}

// tScrollData 
// ScrollViewImpl::getScrBarData()
// {
// 	return m_ScrData;
// }
//
//gkVector3 
//ScrollViewImpl::RatioToPos(float ratio)
//{
//	gkVector3 temp = m_pScrollView->getSBRawPosition();
//	if (ratio< 0 || ratio >1)
//	{
//		return temp;
//	}
//
//	temp.y += ratio*(_SBIMPL_TRACK_LENGTH_-m_ScrData.ScreenSize)+m_ScrData.ScreenSize/2;
//
//	return temp;
//}
//
//float 
//ScrollViewImpl::PosToRatio(gkVector3 pos)
//{
//	//float y = (pos.y - m_ScrData.ScreenSize/2 - _SBIMPL_TRACK_TOP_Y_)/(_SBIMPL_TRACK_LENGTH_-m_ScrData.ScreenSize);
//
//	return 0.0f;
//}

bool 
ScrollViewImpl::moveFocus(eFlyDirection direct)	// 移动focus
{
	_ASSERT_(m_pViewUtil);
	switch(direct)
	{
		case UP:
			m_pViewUtil->nRowScroll(DOWN);
			break;
		case DOWN:
			m_pViewUtil->nRowScroll(UP);
			break;
	}
	return true;//m_pScrollView->moveFocus(direct);
}

bool 
ScrollViewImpl::MoveViewFocus(RootViewImpl* pPreImpl,eFlyDirection direction)
{
	m_pScrollView->setFocus();
	return true;
}

bool 
ScrollViewImpl::setViewNodeFocus(ViewNode* pNode)		// 设置viewNode* 为当前focus
{
	m_pScrollView->setFocus(0);
	return true;
}

ViewNode* 
ScrollViewImpl::getCurrentViewNode()
{
	return m_pScrollView->getFocus();
}

void 
ScrollViewImpl::onLoseFocus()
{

}
