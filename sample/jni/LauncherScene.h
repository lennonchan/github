//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LauncherScene.h
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#if !defined(_LAUNCHERSCENE_H)
#define _LAUNCHERSCENE_H

#include <gkScene.h>
#include <gkGameObject.h>
#include "BlenderAnimation.h"
#include "TranslationAnm.h"
#include "ViewNode.h"
#include "Util.h"
#include "blenderAnmInterface.h"
#include "TranslationAnmInterface.h"

#define  _LAUNCHER_EDITMENU_OLDSTYLE_	0// 是否为只有四个版的模式
#define	_LAUNCHER_HOMEAPP_POS_BITNUM_	8
#define  _GLOBLE_BG_COLORNUM_	12
class Block;
class TitleBlock;
class DataBaseImpl;
class AppUnit;
class StateBarViewImpl;
class LauncherScene :public BlenderAnmInterface,public TranslationAnmInterface{
#define __MAX_BLOCK_NUM	7
#define _MAX_BLOCKS_EDIT_PER_SCREEN 5
	friend class Block;
public:
	LauncherScene(gkScene*);
	~LauncherScene();
	static LauncherScene* getInstance();
	virtual void onBlenderAnmFinish(BlenderAnimation* p,int s,int e);
	virtual void onTranslationAnmFinish(TranslationAnm* p);
	bool blockWholeTranslation(eFlyDirection);	// 整体界面平移
	bool blockWholeTranslation(unsigned int startPage,unsigned int endPage);
	bool blockFocusTranslation(eFlyDirection);	// 焦点移动
	bool setBlockWholePosition(int);			// 设置主界面定位到第N帧
	bool setBlockWholePage(int);				// 设置主界面定位到第N个Block
	unsigned int  getCurrentBlockID();			// 获取当前焦点block的ID
	Block*  getBlockByID(unsigned int iId);
	eFlyDirection setCurrentFocus(ViewNode*);	// 设置焦点focus
	bool setCurrentFocus(const int index);		// 设置当前页的focus
	void tick(gkScalar time);					// 更新
	gkScene * getScene();						// 获取scene
	ViewNode* isHitGameObj(Ogre::RaySceneQueryResult& objArray);					// 碰撞检测
	bool isFocusOnAllAppButton();
	AppUnit* getCurrentApp();
	AppUnit* getHitApp(Ogre::RaySceneQueryResult& objArray);
	void setFocusVisible(bool vsb);
	bool getFocusVisible();

	void finishBlockWholeTranslation();

	void setAllLauncherSceneVisible(bool visible);

	static int* getBgColors();
public:
	void setEditMode(bool);
	bool isInEditMode();
public:
	bool flyMenuFocus_EM(eFlyDirection e);//移动edit menu的focus
	bool flyMenuFocusImpl_EM(eFlyDirection e);
	bool flyMenuFocus_EM();
	bool switchBlockIndex_EM(int i1,int i2);	// 交换面板的次序
	bool switchBlockIndex_EM(eFlyDirection);
	bool switchBlockIndexImpl_EM(eFlyDirection);
	bool setBlockFocus_EM(int index);
	bool setBlockFocus_EM(eFlyDirection e);
	bool setDeleteShortCutMode_EM(bool);
	bool addBlock_EM();
	bool deleteBlock_EM();
	bool deleteShortCut_EM(ViewNode* pObj);
	int getCurrentFocusIndex_EM();
	void setCurrentFocusIndex_EM(int idx);
	bool blockRename_EM(gkString rename="我的模块");
	bool isHitExitNode_EM(Ogre::RaySceneQueryResult& objArray);
	int getTotalBlockNum();
	void setTotalBlockNum(int num);
	void hideEditMenu(BlenderAnmInterface* pInterface = NULL);		// 隐藏EditMenu

	// edit menu mode
	// add by dabao for test edit mode state change and event process
	bool onContextMenu_EM(int& currentIndex,Ogre::RaySceneQueryResult& objArray);
	void setMenuFocus_EM(unsigned int index);
	unsigned int getMenuFocus_EM();

private:
	void initEditMenu();
	void destoryEditMenu();
	void showEditMenu_Four();
	void hideEditMenu_Four();
	void loadHomeApps();
protected:
	void setEditMenuFlag(int flag); // 第一项：1<<3 二项:1<<2 三项:1<<1 四项 1
	void setEditMenuPos(gkVector3 pos);
private:
	bool setPageTimePosition(unsigned int startPage,unsigned int endPage);
	bool setTimePosition(int start,int end);
	void setBlockMaskVisible(Block* pBlock,bool vsb);
	bool enterEditMode();
	bool exitEditMode();
	void initEditFocus();
	void initEditBlock();
	void exitEditFocus();
	void setTvBlockEnable(bool enable);
	void switchBlckBldAnm_EM(int i1,int i2);	// 交换面板动画
	void transformEditBlockAnm_EM(eFlyDirection e);
	void createEditBkFocusAnm_EM();
	void setFocusInAnm_EM(gkGameObject* pObj,const gkVector3 pos);
	void setFocusOutAnm_EM(gkGameObject* pObj,const gkVector3& pos);
	void playBlockFocusAnm_EM();
	void rememberBlocksRawPos_EM();
	static void setBlockOgreAnm_EM(TranslationAnm*,gkGameObject* pObj,gkGameObject* pDest,gkVector3);
private:
	static LauncherScene* m_this;
	gkGameObject* m_pSceneParentPlane;		// 所有block的根节点
	gkGameObject* m_pEditPageNode;			// "编辑页面"节点
	gkGameObject* m_pExitEditModeIcon;		// 退出编辑选项
	BlenderAnimation* m_pBldAnm;              //所有block的父节点动画，位移动画
	BlenderAnimation* m_pEditPageAnm;		// m_pEditPageNode的动画
	BlenderAnimation* m_pExitEMAnm;			// m_pExitEditModeIcon的动画
	BlenderAnimation* m_pBgAnm;				// 背景图的动画
	Block**  m_ppBlocklist;					// block数组
	TitleBlock* m_pTitleBlock;				// 
	bool    m_isEditMode;					// 标记是否为编辑模式
	int     m_currentID;					// 正常模式下 当前模块的ID
	bool	m_FocusOnTitle;					// 标记Focus是否在TitleBlock上
	gkScene*   m_pScene;
	int deletedBlockNum;

	// edit mode menu
	TranslationAnm** m_ppEditBkSwitchAnm;	// 编辑模式下 模块换位动画
	TranslationAnm** m_ppEditBkFocusAnm;	// 编辑模式下 模块焦点切换动画
	int m_editBlockFocusID;					// 编辑模式下 模块焦点ID

	EditBlockIdx m_curEditBlockIdxPerScreen;
	int  m_editblockLeftTranNum;
	int  m_editblockRightTranNum;


	int m_totalBlockNumEdit;                            //edit下的block数量，默认是6个。前5个在一个屏幕内
	ViewNode** m_ppMenuNode;			//menu数组
	BlenderAnimation** m_ppEditMenuAnm;
	DataBaseImpl* m_pDataBase;

	StateBarViewImpl * m_pStateBar;
	static int g_BGColor[_GLOBLE_BG_COLORNUM_];
private:
	BlockAniFilpInEdit nextEditBlockBldAni;
	bool hasEnterEditAniFinished;
	bool hasFinishEditSBA;  //has finish edit switch block ani

};

#endif  //_LAUNCHERSCENE_H