//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Block.cpp
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#include "Block.h"
#include "OgreEntity.h"
#include "gkEntity.h"
#include "ViewNode.h"
#include "FocusMovePath.h"
#include <Logic/gkNodeManager.h>
#include <Logic/gkLogicTree.h>

#define FOCUS_PLANE_NAME	"focus"//"line_01"
#define FOCUS_OFFSET gkVector3(0,-0.01,0)

#define FOCUS_EDIT_MENU_NAME "focus_xa1"
#define FOCUS_EDIT_MENU_ANM "Plane_xa01cAction"

#define _BLOCK_EDITMENU_SHOW_START_		855
#define _BLOCK_EDITMENU_SHOW_END_		876
#define _BLOCK_EDITMENU_HIDE_START_		876
#define _BLOCK_EDITMENU_HIDE_END_		897

TranslationAnm* Block::pFocus = NULL;
gkGameObject* Block::m_pFocus = NULL;

gkGameObject * Block::m_pFocusEditMenuFocusObj = NULL;
TranslationAnm * Block::m_pFocusEditMenuFocusAni = NULL;

BlenderAnimation * Block::m_pMenuFocusAnm = NULL;
bool Block::isMenuFlag = false;

Block::Block(gkScene* pScene):m_pScene(pScene),m_ppShortcutList(NULL),m_pCurrentFocus(NULL),m_MenuVisibleFlag(false),
						m_FocusIndex(100),m_pBldAnm(NULL),m_BlockPos(0,0,0),m_InstanceFlag(false),
						m_MenuItemNum(0),m_MenuItemFocus(-1), m_CurrentFocus_EM(NULL),m_ppMenuAnmList(NULL),
						m_ppMenuObjList(NULL),m_pBldAnmInterface(NULL),m_pMaskPlane(NULL)
{
	if (!pFocus)
	{	
		m_pFocus = m_pScene->getObject(FOCUS_PLANE_NAME);
		m_pFocus->setObjectRenderPriority(60);
		static TranslationAnm tempFocus = TranslationAnm(m_pScene,m_pFocus,"FocusMove",FOCUS_OFFSET,gkVector3(0,-0.01,0));
		pFocus = &tempFocus;
	}

	if (!m_pFocusEditMenuFocusAni)
	{
		m_pFocusEditMenuFocusObj = m_pScene->getObject(FOCUS_EDIT_MENU_NAME);
		m_pFocusEditMenuFocusObj->getEntity()->getEntity()->getSubEntity(0)->setRenderPriority(5);
		static TranslationAnm tempFocus = TranslationAnm(m_pScene, m_pFocusEditMenuFocusObj, "FocusMoveEditMenu", gkVector3(0,0,0), gkVector3(0, 0, 0));
		m_pFocusEditMenuFocusAni = &tempFocus;
	}
	m_pFocusEditMenuFocusObj->setVisible(false);

	if(!Block::getMenuFocusAnm())
	{
		BlenderAnimation * editFocusAmn = new BlenderAnimation(m_pScene, m_pScene->getObject("focus_xa1"), "Plane_xa01cAction");
		Block::setMenuFocusAnm(editFocusAmn);
		Block::getMenuFocusAnm()->setAnmInterface(this);
	}
}

Block::~Block()
{
	ui_delete(m_pBldAnm);
	ui_deleteArray(m_ppShortcutList,m_ShortCutNum);
	if(m_ppMenuObjList)
		delete[] m_ppMenuObjList;
//	ui_delete(m_CurrentFocus_EM);
}

int 
Block::getShortcutsNum()
{
	return m_ShortCutNum;
}

gkGameObject* 
Block::getFocus()
{
	return m_pFocus;
}


gkGameObject*
Block::getEditFocus()
{
	return m_pFocusEditMenuFocusObj;
}

void
Block::setFocusEditVisable(bool vsb)
{
	m_pFocusEditMenuFocusObj->setVisible(vsb);
}

bool
Block::getFocusEditVisable()
{
	return m_pFocusEditMenuFocusObj->getVisible();
}

void 
Block::setFocusVisible(bool vsb)
{
	m_pFocus->setVisible(vsb);
}

bool 
Block::getFocusVisible()
{
	return m_pFocus->getVisible();
}

TranslationAnm* 
Block::getFocusAnm()
{
	return pFocus;
}

TranslationAnm*
Block::getFocusEditAnm()
{
	return m_pFocusEditMenuFocusAni;
}

BlenderAnimation *
Block::getMenuFocusAnm()
{
	return m_pMenuFocusAnm;
}

void
Block::setMenuFocusAnm(BlenderAnimation * bldAni)
{
	m_pMenuFocusAnm = bldAni;
}


bool
Block::getMenuFocusFlag()
{
	return isMenuFlag;
}

void 
Block::setMenuFocusFlag(bool flag)
{
	isMenuFlag = flag;
}

AppUnitShortcut* 
Block::getShortcutByApp(AppUnit* pApp)
{
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(pApp == m_ppShortcutList[i]->getApp())
			return m_ppShortcutList[i];
	}
	return NULL;
}

bool 
Block::setAppByIndex(int index,AppUnit* pApp)
{
	index &= 255;
	int minindex = 0,maxindex = 0;
	AppUnitShortcut* pShortcut = NULL;
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		minindex = m_ppShortcutList[i]->getMinIndex();
		maxindex = m_ppShortcutList[i]->getMaxIndex();
		if(index>=minindex && index <= maxindex)
		{
			if(!pShortcut || minindex > pShortcut->getMinIndex())
				pShortcut = m_ppShortcutList[i];
		}
	}
	if(!pShortcut)
		return false;
	pShortcut->setApp(pApp);
	return pShortcut->syncTexture();
}

void 
Block::setMaskVisible(bool vsb)
{
	if(m_pMaskPlane)
		m_pMaskPlane->setVisible(vsb);
}

void 
Block::setXVisible(bool vsb)	//
{
	if(!m_ppShortcutList)
		return;
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(!m_ppShortcutList[i]&&m_ppShortcutList[i]->getGameObj())
			continue;
		if(m_ppShortcutList[i]->getGameObj()->getSubEntitiesNum() >= 5)
		{
			m_ppShortcutList[i]->getGameObj()->setSubEntityVisible(_APP_X_INDEX_,vsb);
		}
	}
}

void 
Block::tidyApps(AppUnitShortcut* startApp)		// 整理app，将排在后面的app调整到前面的空缺位置
{
	if(!startApp)
		return tidyApps(0);
	int minindex = 0,maxindex = 0;
	AppUnitShortcut* pShortcut = NULL;
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(startApp == m_ppShortcutList[i])
			return tidyApps(i);
	}

	return;
}

void 
Block::tidyApps(int index)
{
	if(index<0||m_ppShortcutList[index]->getApp() != NULL)
		return;
	for (int i = index+1;i<m_ShortCutNum;i++)
	{
		if(m_ppShortcutList[i]->isNailApp())
			continue;
		if (m_ppShortcutList[i]->getApp() != NULL)
		{
			m_ppShortcutList[index]->setApp(m_ppShortcutList[i]->getApp());
			m_ppShortcutList[i]->setApp(NULL);
			m_ppShortcutList[index]->syncTexture();
			m_ppShortcutList[i]->syncTexture();
			return tidyApps(++index);
		}
	}
}

int 
Block::getVacantPosID()
{
	int BlockID = getVacantPosParentID();
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(m_ppShortcutList[i]->isNailApp())
			continue;
		if(m_ppShortcutList[i]->getApp() == NULL)
			return BlockID<<_LAUNCHER_HOMEAPP_POS_BITNUM_|m_ppShortcutList[i]->getMinIndex();
	}
	return -1;
}

void 
Block::setAllVisible(bool visible)
{
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(!m_ppShortcutList[i]->getGameObj())
			continue;
		m_ppShortcutList[i]->getGameObj()->setVisible(visible);
	}
}

bool 
Block::flyfocus(eFlyDirection e,ViewNode* pFocusNode) 
{
	//跨越block的时候，pShortcup为NULL
	ViewNode* pShortcup = FocusMovePath::getNextFocusNode_HomeBlock((ViewNode**)m_ppShortcutList,pFocusNode?pFocusNode:m_pCurrentFocus,e,this->getShortcutsNum());
	if(!pShortcup)
		return false;
	static bool bFinish = false;
	if(bFinish)
		pFocus->finishAnimation();
	bFinish = true;
	float scalex = pShortcup->getScale().x*1.05f > 1 ? pShortcup->getScale().x*1.05f: 1;
	float scaley = pShortcup->getScale().y*1.05f > 1 ? pShortcup->getScale().y*1.05f: 1;
	Ogre::Vector4 texM = Ogre::Vector4(scalex,scaley,0,0);
	((gkEntity*)m_pFocus)->setTextureMatrix(0,texM,0);
	((gkEntity*)m_pFocus)->setTextureMatrix(0,texM,1);

	pFocus->To(pShortcup->getPosition(),pShortcup->getScale()/**1.05f*/);
	pFocus->Fly();
	this->m_pCurrentFocus = (AppUnitShortcut*)pShortcup;

	return true;
}

bool 
Block::flyfocus(ViewNode* pDestFocusNode)
{
	if(!pDestFocusNode)
		return false;

	pFocus->To(pDestFocusNode->getPosition(),pDestFocusNode->getScale());
	pFocus->Fly();
	this->m_pCurrentFocus = (AppUnitShortcut*)pDestFocusNode;

	return true;
}

bool
Block::flyfocusImp(gkGameObject * pDes)
{
	if (pDes != NULL)
	{
		gkVector3 myPos = pDes->getWorldPosition();
		gkVector3 myScale = pDes->getWorldScale();
		m_pFocusEditMenuFocusAni->To(myPos, myScale);
		m_pFocusEditMenuFocusAni->Fly();
		this->m_CurrentFocus_EM = pDes;
		return true;
	}
	return false;
}

bool
Block::flyfocusImp(gkGameObject * pDes, gkVector3 pos, gkVector3 scale)
{
	
	if (pDes)
	{
		//gkVector3 myScale = pDes->getWorldScale();
		m_pFocusEditMenuFocusAni->To(pos, scale);
		m_pFocusEditMenuFocusAni->Fly();
		this->m_CurrentFocus_EM = pDes;
		return true;
	} 
	return false;
}

bool
Block::flyfocusInEditMenu(eFlyDirection e, gkGameObject * pDes)
{
	if ( e == UP )
	{
		if (m_MenuItemFocus > 0)
		{
			m_MenuItemFocus--;
			flyfocusImp(m_ppMenuObjList[m_MenuItemFocus]);
		}
		return true;
	} 
	else if( e == DOWN)
	{
		if (m_MenuItemFocus < m_MenuItemNum - 1)
		{
			m_MenuItemFocus++;
			flyfocusImp(m_ppMenuObjList[m_MenuItemFocus]);
		}
		return true;
	}
	else if ( e == LEFT || e == RIGHT)
	{
		//getEditFocus()->setVisible(true);

		m_MenuItemFocus = 0;
#if 1
		m_pMenuFocusAnm->setFrameScope(876, 896);
		m_pMenuFocusAnm->play();
	    isMenuFlag = true;
		Block::getEditFocus()->setPosition(pDes->getWorldPosition());
		Block::getEditFocus()->setScale(pDes->getWorldScale());
		m_pMenuFocusAnm->setFrameScope(856, 876);
		m_pMenuFocusAnm->play();
	
		Block::m_pFocusEditMenuFocusAni->To(pDes->getWorldPosition(), pDes->getWorldScale());
#else
		flyfocusImp(pDes);
#endif

		return true;
	}
	return false;
}



bool 
Block::flyfocusInEditMenu(gkGameObject * pDes)
{
	return true;
}


void 
Block::onLoseFocus()
{

}

ViewNode* 
Block::isHitGameObj(Ogre::RaySceneQueryResult& objArray)
{
	gkGameObject* result = NULL;

	for (int i = 0;i < m_ShortCutNum;i++)
	{
		result = m_ppShortcutList[i]->getGameObj();
		if(result && isObjInArray(objArray,result))
		{
			//printf("slef %x \n",result);
			return m_ppShortcutList[i];

		}
			
	}

	return NULL;
}

bool 
Block::deleteLinker() 
{
	return true;
}

void 
Block::refreshLinker() 
{

}

void 
Block::instanceBlock()
{
	for (int i = 0;i<m_ShortCutNum;i++)
	{
		if(!m_ppShortcutList[i]->getGameObj()->isInstanced())
		{
			m_ppShortcutList[i]->getGameObj()->createInstance(true);
		}
	}

	m_InstanceFlag = true;
}

bool 
Block::isBlockInstanced()
{
	return m_InstanceFlag;
}

void 
Block::setAnmFrameScope(int s,int e)
{
	if (m_pBldAnm)
	{
		m_pBldAnm->setFrameScope(s,e);
	}
}

bool 
Block::playAnimation()
{
	return !m_pBldAnm?false:m_pBldAnm->play();
}

void
Block::setBlenderAnm(BlenderAnimation* pbAnm)
{
	m_pBldAnm = pbAnm;
}

BlenderAnimation* 
Block::getBlenderAnm()
{
	return m_pBldAnm;
}

gkGameObject* 
Block::getBlockParentPlane()
{
	return m_BlockParentPlane;
}

AppUnitShortcut**	  
Block::getShortcutsList()
{
	return m_ppShortcutList;
}

AppUnitShortcut*  
Block::getCurrentFocus()
{
	return m_pCurrentFocus;
}

void 
Block::setRawData(gkVector3 pos)
{
	m_BlockPos = pos;
}

void 
Block::writeDownRawData()
{
	m_BlockPos = m_BlockParentPlane->getNode()->getPosition();
}

gkVector3 
Block::getRawData()
{
	return m_BlockPos;
}

int 
Block::getMenuFlag()
{
	return 0;
}

#define _BLOCK_MENU_ gkVector3(-4.30545,3.00000,-0.24259)	// menu在第一个版上的位置
#define _BLOCK_MENU_UNIT_ gkVector3(3.97655,0,0)	//-0.32890

gkVector3 
Block::getMenuPos(int index)
{
	return _BLOCK_MENU_+_BLOCK_MENU_UNIT_*(index-1);
}



gkGameObject** 
Block::getObjectInEditMenu()
{
	return m_ppMenuObjList;
}

BlenderAnimation ** 
Block::getBlnAniInEditMenu()
{
	return m_ppMenuAnmList;
}


gkGameObject** 
Block::getMenuObjList()
{
	return m_ppMenuObjList;
}


void
Block::showMenu()
{
	if (!m_ppMenuAnmList || !m_ppMenuObjList)
	{
		return;
	}
	m_MenuVisibleFlag = true;
	for (int i = 0;i<m_MenuItemNum;i++)
	{
		if(!m_ppMenuObjList[i])
			continue;
		m_ppMenuObjList[i]->setVisible(true);
		//m_ppMenuObjList[0]->getWorldPosition();
	}
	for (int i = 0;i<m_MenuItemNum*_BLOCK_EDITMENU_ANM_;i++)
	{
		if(!m_ppMenuAnmList[i])
			continue;
		m_ppMenuAnmList[i]->setFrameScope(_BLOCK_EDITMENU_SHOW_START_,_BLOCK_EDITMENU_SHOW_END_);
		m_ppMenuAnmList[i]->play();
	}
}

void 
Block::hideMenu(BlenderAnmInterface* pInterface)
{
	if (!m_ppMenuAnmList || !m_ppMenuObjList)
	{
		return;
	}
	m_MenuVisibleFlag = false;
	for (int i = 0;i<m_MenuItemNum*_BLOCK_EDITMENU_ANM_;i++)
	{
		if(!m_ppMenuAnmList[i])
			continue;
		m_ppMenuAnmList[i]->setFrameScope(_BLOCK_EDITMENU_HIDE_START_,_BLOCK_EDITMENU_HIDE_END_);
		m_ppMenuAnmList[i]->play();
	}
	m_pBldAnmInterface = pInterface;
}

void 
Block::onBlenderAnmFinish(BlenderAnimation* p,int s,int e)
{

	if (!m_ppMenuAnmList || !m_ppMenuObjList)
	{
		return;
	}

	if(!m_MenuVisibleFlag && p == m_ppMenuAnmList[0])
	{
		for (int i = 0;i<m_MenuItemNum;i++)
		{
			if(!m_ppMenuObjList[i])
				continue;
			m_ppMenuObjList[i]->setVisible(false);
		}
		if(m_pBldAnmInterface)
		{
			m_pBldAnmInterface->onBlenderAnmFinish(p,s,e);
			m_pBldAnmInterface = NULL;
		}
		//LauncherScene::getInstance()->exitEditMode();
	}
}

int 
Block::getMenuItemNum()
{
	return m_MenuItemNum;
}

void 
Block::setMenuItemNum(int menuItemNum)
{
	m_MenuItemNum = menuItemNum;
}

int 
Block::getMenuItemFocusIdx()
{
	_ASSERT_(m_MenuItemFocus < m_MenuItemNum);
	return m_MenuItemFocus;
}
void 

Block::setMenuItemFocusIdx(int menuItemFocusIdx)
{
	_ASSERT_(menuItemFocusIdx < m_MenuItemNum);
	menuItemFocusIdx<m_MenuItemNum?m_MenuItemFocus = menuItemFocusIdx:m_MenuItemFocus = m_MenuItemNum-1;
}

void 
Block::setBlockVisible(bool isBlockVisable)
{
	m_BlockParentPlane->setVisible(isBlockVisable);
	m_pMaskPlane->setVisible(isBlockVisable);
}

bool 
Block::isDelete()
{
	return false;
}

void 
Block::addMyBlock()
{
	
}


void 
Block::deleteMyBlock()
{

}

bool 
Block::setMyBlockFocusVisible(bool isVisible)
{
	return false;
}

gkGameObject*
Block::getAddBlockSymbol()
{
	return NULL;
}