//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : DataBaseImpl.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "DataBaseImpl.h"
#include "sqliteUI5.0/CUI50DBService.h"
#include "Util.h"

using namespace tcl;

#ifdef OGREKIT_BUILD_ANDROID
#define _DATA_PATH_	"/data/data/com.tcl.UIEngine/appdatabase.db"
#else
#define _DATA_PATH_	"sqliteUI5.0/appdatabase.db"
#endif

vector<AppUnit*> DataBaseImpl::m_AppsVector;
DataBaseImpl* DataBaseImpl::m_pThis = NULL;
//CDataService* DataBaseImpl::m_pDataService = NULL;
DataBaseImpl::DataBaseImpl() 
{
	 m_pDataService = new CDataService();
	if(m_pDataService->GetDataService(_DATA_PATH_) == NULL)
		gkPrintf("GetDataService error\n");
	vector<AppDataInfo> data = m_pDataService->GetDataAll(); // GetDataAll 参数 ture 为返回 按英文名字排序 false 为按照 启动次数排序
	AppUnit* pAppTemp = NULL;
	for (unsigned int i = 0;i<data.size();i++)
	{
		pAppTemp = new AppUnit(data[i]);
		pAppTemp->setIndex(i,i);
		m_AppsVector.push_back(pAppTemp);
	}
	gkPrintf("DataBaseImpl app Num = %d\n",m_AppsVector.size());
	m_pThis = this;
}

DataBaseImpl::~DataBaseImpl()
{
	unsigned int index = 0;
	vector<AppUnit*>::iterator it=m_AppsVector.begin();

	while (index < m_AppsVector.size())
	{
		AppUnit* pApp = m_AppsVector.at(index);
		if(pApp->getDataChangeFlag())
			updateApp(pApp);
		ui_delete(pApp);
		index++;
	}
	m_AppsVector.clear();
}

vector<AppUnit*>* 
DataBaseImpl::getAppsVector()
{
	return &m_AppsVector;
}

AppUnit* 
DataBaseImpl::getApp(int id)
{
	for (unsigned int i = 0;i<m_AppsVector.size();i++)
	{
		AppUnit* pApp = m_AppsVector.at(i);
		if (pApp->getID() == id)
		{
			return pApp;
		}
	}

	return NULL;
}

AppUnit* 
DataBaseImpl::getNodeByVindex(unsigned int index)
{
	if (index < 0 || index >= m_AppsVector.size())
	{
		return NULL;
	}

	return m_AppsVector.at(index);
}

AppUnit* 
DataBaseImpl::getNodeByObjIndex(int index)		
{
	for (unsigned int i = 0;i<m_AppsVector.size();i++)
	{
		AppUnit* pApp = m_AppsVector.at(i);
		if (pApp->getMinIndex() <= index && pApp->getMaxIndex()>=index)
		{
			return pApp;
		}
	}

	return NULL;
}

void 
DataBaseImpl::appInverted()
{
	/*AppUnit* pApp0 = NULL;
	AppUnit* pApp1 = NULL;
	int size = m_AppsVector.size();
	vector<AppUnit*>::iterator it=m_AppsVector.begin();
	int i = 0;
	for(it = m_AppsVector.begin(); it != m_AppsVector.end(); ++it,++i)
	{
		AppUnit* pApp0 = m_AppsVector.at(i);
		m_AppsVector.erase(it);
		m_AppsVector.push_back(pApp0);
		
	}*/
}

void 
DataBaseImpl::addApp(AppUnit* pApp)
{
	_ASSERT_(pApp);
	AppDataInfo a = pApp->getAppInfo();
	m_pDataService->AddData(a);
	m_AppsVector.push_back(pApp);
}

void 
DataBaseImpl::removeApp(AppUnit* pApp)
{
	vector<AppUnit*>::iterator it=m_AppsVector.begin();
	int size = getAppsNum();
	for (int i = 0;i<size;i++,it++)
	{
		if(m_AppsVector[i]->getID() == pApp->getID())
		{
			m_pDataService->DeleteData(pApp->getID());
			ui_delete(m_AppsVector[i]);
			m_AppsVector.erase(it);
			break;
		}
	}
}

void 
DataBaseImpl::updateApp(AppUnit* pApp)
{
	_ASSERT_(pApp);
	m_pDataService->UpdateData(pApp->getID(),pApp->getAppInfo());
}

int 
DataBaseImpl::getAppsNum()
{
	return m_AppsVector.size();
}

DataBaseImpl* 
DataBaseImpl::getInstance()
{
	return m_pThis?m_pThis:new DataBaseImpl();
}