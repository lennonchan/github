//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Focus.cpp
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#include "TranslationAnm.h"
#include "TranslationAnmInterface.h"
#include "Util.h"
#include <OgreSceneManager.h>
 

#define ANM_KEYFRAME_0	(0)
#define ANM_KEYFRAME_1	(1)
#define ANM_TIME              (0.5)

TranslationAnm::TranslationAnm(gkScene* scene,gkGameObject* pObj,const gkString& str,gkVector3 flyoffset,gkVector3 posoffset):
	m_scene(scene),m_pGameObj(pObj),m_pAnmState(NULL),m_pAnm(NULL),m_pAnmTrack(NULL),m_AnmEnable(false),m_sAnmName(str),
		m_AnmFlyOffset(flyoffset),m_AnmPosOffset(posoffset),m_pAnmListener(NULL)
{
	gkVector3 temp(0,0,0);
	gkVector3 temp0(1,1,1);
	m_ToPos = m_FromPos = temp;
	m_ToScale = m_FromScale = temp0;
	setCurrentSecne();
}

TranslationAnm::~TranslationAnm()
{
	
}

void TranslationAnm::setGameObject(gkGameObject * obj)
{
	if(!obj)
		return;
	m_pGameObj = obj;
	m_pAnmTrack->setAssociatedNode(m_pGameObj->getNode());
}

void TranslationAnm::From(const gkVector3& pos, const gkVector3& scale)
{
	m_FromPos = pos + m_AnmFlyOffset;
	m_FromScale = scale;

	Ogre::TransformKeyFrame* keyFrame=m_pAnmTrack->getNodeKeyFrame(ANM_KEYFRAME_0);//NodeKeyFrame(0);
	keyFrame->setTranslate(m_FromPos);
	keyFrame->setScale(m_FromScale);
}

void TranslationAnm::To(const gkVector3& pos, const gkVector3& scale,bool replaceFrom)
{
	From(m_ToPos,m_ToScale);
	m_ToPos =  pos + m_AnmFlyOffset;
	m_ToScale = scale;

	Ogre::TransformKeyFrame* keyFrame=m_pAnmTrack->getNodeKeyFrame(ANM_KEYFRAME_1);//NodeKeyFrame(0);
	keyFrame->setTranslate(m_ToPos);
	keyFrame->setScale(m_ToScale);
}

void TranslationAnm::setCurrentSecne()
{
	if(!m_scene)
		return;
	
	m_pAnm = m_scene->getManager()->createAnimation(m_sAnmName,ANM_TIME);
	m_pAnm->setInterpolationMode(Ogre::Animation::IM_SPLINE);
	if(m_pGameObj)
	{
		m_ToPos = m_FromPos = m_pGameObj->getPosition();
		m_ToScale = m_FromScale = m_pGameObj->getScale();

		m_pAnmTrack=m_pAnm->createNodeTrack(0,m_pGameObj->getNode());

		Ogre::TransformKeyFrame* k_t0_0=m_pAnmTrack->createNodeKeyFrame(ANM_KEYFRAME_0);
		k_t0_0->setTranslate(m_FromPos);
		k_t0_0->setScale(m_FromScale);

		Ogre::TransformKeyFrame* k_t0_2=m_pAnmTrack->createNodeKeyFrame(ANM_TIME);
		k_t0_2->setTranslate(m_ToPos);
		k_t0_2->setScale(m_ToScale);
	}

	m_pAnmState = m_scene->getManager()->createAnimationState(m_sAnmName);
	m_pAnmState->setEnabled(false);
	m_pAnmState->setLoop(false);
}

void TranslationAnm::Update(gkScalar time)
{
	if(m_pAnmState->getEnabled())
	{
		m_pAnmState->addTime(time);
		if(m_pAnmState->getTimePosition() >= (ANM_TIME))
		{
			m_pGameObj->setPosition(m_ToPos+m_AnmPosOffset);
		
			m_pGameObj->getNode()->_update(true,false);
			finishAnimation();
			
			if(m_pAnmListener)
			{
				m_pAnmListener->onTranslationAnmFinish(this);
			}
		}
	}
}

void TranslationAnm::Fly() 
{
	Ogre::SceneNode* node = m_pGameObj->getNode();
	Ogre::Vector3 pos = node->getPosition();
	if(m_pAnmState->getEnabled())
		return;
	Ogre::TransformKeyFrame* k_t0_0=m_pAnmTrack->getNodeKeyFrame(ANM_KEYFRAME_0);
	k_t0_0->setRotation(node->getOrientation());

 	Ogre::TransformKeyFrame* k_t0_2=m_pAnmTrack->getNodeKeyFrame(ANM_KEYFRAME_1);
 	k_t0_2->setRotation(node->getOrientation());

	m_pAnmState->setTimePosition(0);
	m_pAnmState->setEnabled(true);
}

void 
TranslationAnm::finishAnimation()
{
	if(!m_pAnmState->getEnabled())
		return;
	m_pAnmState->setTimePosition(0.5f);
	m_scene->forceUpdateOgreAnimate(m_sAnmName);
	m_pAnmState->setEnabled(false);
}

bool 
TranslationAnm::getAnimationEnable()
{
	return m_pAnmState->getEnabled();
}

void 
TranslationAnm::setAnmListener(TranslationAnmInterface* pInterface)
{
	m_pAnmListener = pInterface;
}

void 
TranslationAnm::setVisible(bool vsb)
{
	_ASSERT_(m_pGameObj);
	m_pGameObj->setVisible(vsb);
}

bool 
TranslationAnm::getVisible()
{
	return m_pGameObj->getVisible();
}