//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Aabridge.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//

#include <gkScene.h>
#include <gkCamera.h>
#include "Aabridge.h"
#include "RootView.h"
#include "ViewNode.h"
#include "AppUnit.h"
#include "ScrollViewImpl.h"
#include "LetterViewImpl.h"
#include "MenuViewImpl.h"
#include "AaViewImpl.h"
#include "HaSettingsViewImpl.h"
#include "AaResidentViewImpl.h"
#include "HaResidentViewImpl.h"
#include "SortordViewImpl.h"
#include "BlenderAnimation.h"
#include "AppsViewUtil.h"
#include "sqliteUI5.0/CUI50DBService.h"

#define _PLANE_UP_NAME		"Plane_x07"
#define _PLANE_DOWN_NAME	"Plane_x08"

#define _ANM_UP_NAME				"Plane_vbg01aAction"
#define _ANM_UP_NAME1			"Plane_vbg01aAction.003"

#define _ANM_UP_NAME2			"Plane_vbg01aAction.002"
#define _ANM_UP_NAME3	        "Plane_v02Action"
#define _ANM_UP_NAME4	        "Plane_v03Action"
#define _ANM_UP_NAME5	        "Plane_v04Action"
#define _ANM_UP_NAME6	        "Plane_v05Action"

#define _ANM_DOWN_NAME		"Plane_vbg01bAction"
#define _ANM_DOWN_NAME1		"Plane_vbg01bAction.003"
#define _ANM_DOWN_NAME2	    "Plane_vbg01bAction.002"
#define _ANM_DOWN_NAME3		"Plane_v06Action"
#define _ANM_DOWN_NAME4		"Plane_v07Action"


#define _ANM_UNDOWN_NUM_	12


#define _ENTER_ALLAPP_START_	580
#define _ENTER_ALLAPP_END_		600
#define _EXIT_ALLAPP_START_		700
#define _EXIT_ALLAPP_END_		720

#define _IMPL_NUM_	8

Aabridge* Aabridge::m_pInstance = NULL;
gkScene* Aabridge::m_pScene = NULL;
Aabridge::Aabridge():m_pPlaneUp(NULL),m_pPlaneDown(NULL),m_isAllAppMode(false),
					m_ppImplArray(NULL),m_pFocusImpl(NULL),m_pScrollBarImpl(NULL),m_pLetterImpl(NULL),m_pMenuImpl(NULL),
					m_pAllAppImpl(NULL),m_pHaSetImpl(NULL),m_pViewUtil(NULL),m_pSortImpl(NULL),m_isHomeAppMode(false),
					m_pPreFocusImpl(NULL),m_ppAnmList(NULL),setParentAppPosOnce(true)
{
	if(!m_pInstance)
	{
		m_pInstance = this;
	}

	_ASSERT_(m_pScene);
	
	m_pPlaneUp = m_pScene->getObject(_PLANE_UP_NAME);
	m_pPlaneDown = m_pScene->getObject(_PLANE_DOWN_NAME);

	m_ppAnmList = new BlenderAnimation*[_ANM_UNDOWN_NUM_];
	m_ppAnmList[0] = new BlenderAnimation(m_pScene,m_pPlaneUp,_ANM_UP_NAME);
	m_ppAnmList[1] = new BlenderAnimation(m_pScene,m_pPlaneDown,_ANM_DOWN_NAME);

	m_ppAnmList[2] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_vbg01a"),_ANM_UP_NAME1);
	m_ppAnmList[3] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_vbg01a"),_ANM_UP_NAME2);
	m_ppAnmList[4] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_v02"),_ANM_UP_NAME3);
	m_ppAnmList[5] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_v03"),_ANM_UP_NAME4);
	m_ppAnmList[6] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_v04"),_ANM_UP_NAME5);
	m_ppAnmList[7] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_v05"),_ANM_UP_NAME6);

	
	m_ppAnmList[8] = new BlenderAnimation(m_pScene,m_pScene->getObject("Plane_vbg01b"),_ANM_DOWN_NAME1);
	m_ppAnmList[9] = new BlenderAnimation(m_pScene, m_pScene->getObject("Plane_vbg01b"), _ANM_DOWN_NAME2);
	m_ppAnmList[10] = new BlenderAnimation(m_pScene, m_pScene->getObject("Plane_v06"), _ANM_DOWN_NAME3);
	m_ppAnmList[11] = new BlenderAnimation(m_pScene, m_pScene->getObject("Plane_v07"), _ANM_DOWN_NAME4);

	m_ppAnmList[0]->setAnmInterface(this);
	m_ppAnmList[1]->setAnmInterface(this);
	

	m_ppImplArray = new RootViewImpl*[_IMPL_NUM_];

	m_ppImplArray[AA_ScrollBar] = m_pScrollBarImpl = new ScrollViewImpl();
	m_ppImplArray[AA_Letter] = m_pLetterImpl = new LetterViewImpl();
	m_ppImplArray[AA_Menu] = m_pMenuImpl = new MenuViewImpl();
	m_ppImplArray[AA_AllApp] = m_pAllAppImpl = new AaViewImpl();
	m_ppImplArray[AA_Sort] = m_pSortImpl = new SortordViewImpl(m_pAllAppImpl);
	m_ppImplArray[AA_AaRsd] = m_pAaRsdImpl = new AaResidentViewImpl(m_pSortImpl);
	m_ppImplArray[AA_HaSet] = m_pHaSetImpl = new HaSettingsViewImpl();
	m_ppImplArray[AA_HaRsd] = m_pHaRsdImpl = new HaResidentViewImpl();
	
    //设置前，后，左，右相邻的view区域
	m_ppImplArray[AA_ScrollBar]->setFocusViewImpl(m_ppImplArray[AA_AllApp]);
	m_ppImplArray[AA_Letter]->setFocusViewImpl(m_ppImplArray[AA_AllApp]);
	m_ppImplArray[AA_AllApp]->setFocusViewImpl(m_ppImplArray[AA_AaRsd],NULL/*m_ppImplArray[AA_Letter]*/);
	m_ppImplArray[AA_AaRsd]->setFocusViewImpl(NULL,m_ppImplArray[AA_AllApp]);
	//m_ppImplArray[AA_HaSet]->setFocusViewImpl(m_ppImplArray[6]);
	//m_ppImplArray[AA_HaRsd]->setFocusViewImpl(NULL,m_ppImplArray[3]);
	m_ppImplArray[AA_Sort]->setFocusViewImpl(NULL,m_ppImplArray[4]);

	m_pFocusImpl = m_pAllAppImpl;
	
	m_pViewUtil = AppsViewUtil::getInstance();
	m_pViewUtil->setAaViewImpl(m_pAllAppImpl);
	m_pViewUtil->setScrollImpl(m_pScrollBarImpl);
	m_pViewUtil->setLetterImpl(m_pLetterImpl);
	m_pViewUtil->onAaNumChange();

}

Aabridge::~Aabridge()
{
	ui_deleteArray(m_ppAnmList,_ANM_UNDOWN_NUM_);
	ui_deleteArray(m_ppImplArray,_IMPL_NUM_);
	
	ui_delete(m_pViewUtil);

	m_pViewUtil = NULL;
	m_ppImplArray = NULL;
}

Aabridge* 
Aabridge::getInstance()
{
	return m_pInstance?m_pInstance:new Aabridge();
}

void 
Aabridge::setScene(gkScene* pS)
{
	m_pScene = pS;
}

gkScene* 
Aabridge::getScene()
{
	return m_pScene;
}


void 
Aabridge::setParentAppPos()
{
	if (setParentAppPosOnce)
	{
		m_pAllAppImpl->getRootView()->getParentNode()->getGameObj()->setPosition(gkVector3 (-1.53, -3, 1.732));
		//m_pAllAppImpl->getRootView()->getFocus()->getGameObj()->setPosition(gkVector3(-1.53, -3.01, 1.732));
		RootView::getAaFocusObj()->setPosition(gkVector3(-1.53, -3.01, 1.732));
		setParentAppPosOnce = false;
	}
}

RootViewImpl* 
Aabridge::getViewByNode(ViewNode* pNode)
{
	if(!pNode)
		return NULL;
	bool result = false;
	for (int i = 0;i<_IMPL_NUM_;i++)
	{
		if(static_cast<eAaViews>(i) == AA_AllApp)
			result = m_pAllAppImpl->isInvolvedViewNode(pNode);
		else
			result = RootView::isInvolvedViewNode(m_ppImplArray[i]->getRootView()->getViewNodeList(),pNode,m_ppImplArray[i]->getRootView()->getViewNodeNum());
		if(result)
		{
			return m_ppImplArray[i];
		}
	}

	return NULL;
}

void 
Aabridge::enterAaMode()
{
	//_ASSERT_(m_pBldAnmUp&&m_pBldAnmDown);

	m_pScrollBarImpl->setViewVisible(true);
	m_pAaRsdImpl->setViewVisible(true);
	m_pSortImpl->enterAaMode();//需要播放动画
	m_isAllAppMode = true;
	for (int i = 0;i<_ANM_UNDOWN_NUM_ ;i++)
	{
		m_ppAnmList[i]->setFrameScope(_ENTER_ALLAPP_START_,_ENTER_ALLAPP_END_);
		m_ppAnmList[i]->play();
	}
	setParentAppPos();
}

void 
Aabridge::exitAaMode()
{
	//onHitStDefault();

	//m_pViewUtil->onePageScroll(UP);
	m_isAllAppMode = false;
	//_ASSERT_(m_pBldAnmUp&&m_pBldAnmDown&&m_pScene);
	RootView::setFocusVisible(false);
	m_pAllAppImpl->setViewVisible(false);
	m_pScrollBarImpl->setViewVisible(false);
	//m_pLetterImpl->setViewVisible(false);
	m_pAaRsdImpl->setViewVisible(false);
	m_pSortImpl->exitAaMode();

	for (int i = 0;i<_ANM_UNDOWN_NUM_;i++)
	{
		m_ppAnmList[i]->setFrameScope(_EXIT_ALLAPP_START_,_EXIT_ALLAPP_END_);
		m_ppAnmList[i]->play();
	}
	m_isAllAppMode = false;
}

void 
Aabridge::onBlenderAnmFinish(BlenderAnimation* p,int s,int e)
{
	if (m_isAllAppMode && m_ppAnmList[0] == p)
	{
		_ASSERT_(m_pScene);
		
		RootView::setFocusVisible(true);
		m_pAllAppImpl->setViewVisible(true);
		m_pViewUtil->syncViews();
		//m_pFocusImpl->setViewNodeFocus(m_pFocusImpl->getRootView()->getFocus());
	}
}

bool 
Aabridge::isInAaMode()
{
	return m_isAllAppMode;
}

void 
Aabridge::tick(gkScalar time)
{
	RootViewImpl::onTick(time);
	m_pAllAppImpl->onTick(time);
	m_pHaSetImpl->onTick(time);
}

eAaViews 
Aabridge::getCurrentViewType()
{
	for (int i = 0;i < _IMPL_NUM_;i++)
	{
		if(m_ppImplArray[i] == m_pFocusImpl)
			return static_cast<eAaViews>(i);
	}

	return AA_NON;
}

void 
Aabridge::setFocusView(eAaViews view)
{
	if(view == AA_NON || m_pFocusImpl == m_ppImplArray[view] )
		return;
	//设置当前focus所在的view
	m_pFocusImpl = m_ppImplArray[view];
	ViewNode* pNode = m_pFocusImpl->getRootView()->getFocus();
	pNode?m_pFocusImpl->getRootView()->setFocus(pNode):m_pFocusImpl->getRootView()->setFocus(0);
}

void 
Aabridge::setFocusImpl(RootViewImpl* pImpl)
{
	_ASSERT_(pImpl);
	m_pFocusImpl = pImpl;
	ViewNode* pNode = m_pFocusImpl->getRootView()->getFocus();
	pNode?m_pFocusImpl->getRootView()->setFocus(pNode):m_pFocusImpl->getRootView()->setFocus(0);
}

bool 
Aabridge::moveFocus(eFlyDirection direct)	// 移动focus
{
	bool result = m_pFocusImpl->moveFocus(direct);
	if (result)
		return true;
	RootViewImpl* pViewImpl = NULL;
	switch(direct)
	{
	case LEFT:
		pViewImpl = m_pFocusImpl->getLeftViewImpl();//->MoveViewFocus(m_pFocusImpl,LEFT);
		break;
	case RIGHT:
		pViewImpl = m_pFocusImpl->getRightViewImpl();//->MoveViewFocus(m_pFocusImpl,RIGHT);
		break;
	case UP:
		pViewImpl = m_pFocusImpl->getUpViewImpl();//->MoveViewFocus(m_pFocusImpl,UP);
		break;
	case DOWN:
		pViewImpl = m_pFocusImpl->getDownViewImpl();//->MoveViewFocus(m_pFocusImpl,DOWN);
		break;
	default:
		break;
	}

	if(pViewImpl)
	{
		result = pViewImpl->MoveViewFocus(m_pFocusImpl,direct);
		m_pFocusImpl = pViewImpl;
	}
	return false;
}

bool 
Aabridge::setViewNodeFocus(ViewNode* pNode)		// 设置viewNode* 为当前focus
{
	RootViewImpl* result = getViewByNode(pNode);

	if(result)
	{
		m_pFocusImpl = result;
		return result->setViewNodeFocus(pNode);
		
	}
	return false;
}

ViewNode* 
Aabridge::getHitViewNode(Ogre::RaySceneQueryResult& objArray)
{
	ViewNode* pNode = NULL;
	for (int i = 0;i<_IMPL_NUM_;i++)
	{
		pNode = m_ppImplArray[i]->getHitViewNode(objArray);
		if(pNode)
		{
			break;
		}
	}

	return pNode;
}

void 
Aabridge::onClickCurrentViewNode()			// !!!
{
	return m_pFocusImpl->onHitCurrentNode();
}

void 
Aabridge::onClickViewNode(ViewNode* pNode)
{
	RootViewImpl* result = getViewByNode(pNode);
	if(result)
	{
		result->onClickViewNode(pNode);
	}
}

// scrollbar interface
bool 
Aabridge::isHitScrollBar(Ogre::RaySceneQueryResult& result)
{
	return m_pScrollBarImpl->isHitScrollBar(result);
}

bool 
Aabridge::isHitScrollBarTrack(Ogre::RaySceneQueryResult& result)
{
	return m_pScrollBarImpl->isHitScrollBarTrack(result);
}

gkVector3 
Aabridge::getScrollBarPos()
{
	return m_pScrollBarImpl->getScrBYPos();
}

// letter View interface
char 
Aabridge::getHitLetter(Ogre::RaySceneQueryResult& objArray)				// return NULL or ‘#’ or ‘A’~‘Z’
{
	return m_pLetterImpl->getHitLetter(objArray);
}

char 
Aabridge::getCurrentLetter()			// 获取当前焦点所在的字母
{
	return m_pLetterImpl->getCurrentLetter();
}

void 
Aabridge::setLetterVisable(bool visable)
{
	m_pLetterImpl->setViewVisible(visable);
}

void 
Aabridge::setMoveVector(gkVector3 vt,bool anm,bool isPixUnit)			// 设置aaView的移动向量
{
	m_pViewUtil->setMoveVector(vt,anm,isPixUnit);
}

void 
Aabridge::oneRowScroll(eFlyDirection drct,bool anm)				// 翻一行	
{
	m_pViewUtil->nRowScroll(drct);
}
void 
Aabridge::onePageScroll(eFlyDirection drct,bool anm)				// 翻一页面
{
	m_pViewUtil->onePageScroll(drct);
}

void 
Aabridge::setCurrentLetter(char chr,bool anm)	// 设置点击到的字母
{
	m_pViewUtil->setLetter(chr);
}

// All App sort
void 
Aabridge::setSortordVisible(bool v)
{
	m_pSortImpl->setViewVisible(v);
}

bool
Aabridge::getSortedVisible()
{
	return m_pSortImpl->getViewVisible();
}

bool 
Aabridge::isHitStDefault(Ogre::RaySceneQueryResult& objArray)
{
	return m_pSortImpl->isHitStDefault(objArray);
}

bool 
Aabridge::isHitStFrequence(Ogre::RaySceneQueryResult& objArray)
{
	return m_pSortImpl->isHitStFrequence(objArray);
}

bool 
Aabridge::isHitStLetter(Ogre::RaySceneQueryResult& objArray)
{
	return m_pSortImpl->isHitStLetter(objArray);
}

bool 
Aabridge::isFocusOnStDefault()
{
	return m_pFocusImpl ==m_pSortImpl? m_pSortImpl->isFocusOnStDefault():false;
}

bool 
Aabridge::isFocusOnStFrequence()
{
	return m_pFocusImpl ==m_pSortImpl?m_pSortImpl->isFocusOnStFrequence():false;
}

bool 
Aabridge::isFocusOnHitStLetter()
{
	return m_pFocusImpl ==m_pSortImpl? m_pSortImpl->isFocusOnHitStLetter():false;
}

void 
Aabridge::onHitStDefault()
{
	m_pSortImpl->onHitStDefault();
	m_pLetterImpl->setViewVisible(false);
	m_pScrollBarImpl->setViewVisible(true);
}

void 
Aabridge::onHitStFrequence()
{
	m_pSortImpl->onHitStFrequence();
	m_pLetterImpl->setViewVisible(false);
	m_pScrollBarImpl->setViewVisible(true);
}

void 
Aabridge::onHitStLetter()
{
	m_pSortImpl->onHitStLetter();
	m_pLetterImpl->setViewVisible(true);
	m_pScrollBarImpl->setViewVisible(false);
}

// All Apps View
bool 
Aabridge::isHitTvButton(Ogre::RaySceneQueryResult& objArray)
{
	return m_pAaRsdImpl->isHitTvButton(objArray);
}

bool 
Aabridge::isHitAppMarketButton(Ogre::RaySceneQueryResult& objArray)
{
	return m_pAaRsdImpl->isHitAppMarketButton(objArray);
}

bool 
Aabridge::isHitSortButton(Ogre::RaySceneQueryResult& objArray)
{
	return m_pAaRsdImpl->isHitSortButton(objArray);
}

bool 
Aabridge::isFocusOnTvButton()
{
	return m_pFocusImpl ==m_pAaRsdImpl? m_pAaRsdImpl->isFocusOnTvButton():false;
}

bool 
Aabridge::isFocusOnMarket()
{
	return m_pFocusImpl ==m_pAaRsdImpl? m_pAaRsdImpl->isFocusOnMarket():false;
}

bool 
Aabridge::isFocusOnSortButton()
{
	return  m_pFocusImpl ==m_pAaRsdImpl?m_pAaRsdImpl->isFocusOnSortButton():false;
}

bool 
Aabridge::openTV()
{
	return m_pAaRsdImpl->onClickTvButton();
}

bool 
Aabridge::openMarket()
{
	return m_pAaRsdImpl->onClickAppMarketButton();
}

bool 
Aabridge::enterHomeAppSettings(Block* pObj)
{
	Block::setFocusVisible(false);
	RootView::setFocusVisible(true);
	m_pPreFocusImpl = m_pFocusImpl;
	//setFocusImpl(m_pHaSetImpl);
	m_pFocusImpl = m_pHaSetImpl;
	m_pHaSetImpl->setViewVisible(pObj,true);
	m_isHomeAppMode = true;

	m_pViewUtil->setAaViewImpl(m_pHaSetImpl);
	m_pViewUtil->setScrollImpl(NULL);
	m_pViewUtil->setLetterImpl(NULL);
//	m_pViewUtil->onAaNumChange();
	return true;
}

void 
Aabridge::exitHomeAppSettings()
{
	Block::setFocusVisible(true);
	RootView::setFocusVisible(false);
	setFocusImpl(m_pPreFocusImpl);
	m_pHaSetImpl->setViewVisible(NULL,false);
	m_isHomeAppMode = false;

	m_pViewUtil->setAaViewImpl(m_pAllAppImpl);
	m_pViewUtil->setScrollImpl(m_pScrollBarImpl);
	m_pViewUtil->setLetterImpl(m_pLetterImpl);
	//m_pViewUtil->onAaNumChange();
}

bool
Aabridge::isInHomeAppMode()
{
	return m_isHomeAppMode;
}

void 
Aabridge::setPlateApp(AppUnit* pApp,bool flag)	// flag = true?addApp:cutApp
{
	
}

AppUnit* 
Aabridge::isHitApp_HA()
{
	return NULL;
}

bool 
Aabridge::onInstalledApp(AppDataInfo& info)		// 安装完成的回调
{
	m_pAllAppImpl->onInstalledApp(info);

	return true;
}

AppUnit* 
Aabridge::getCurrentApp()
{
	return m_pFocusImpl!=m_pAllAppImpl?NULL:m_pAllAppImpl->getCurrentApp();
}

AppUnit* 
Aabridge::isHitApp_AA(Ogre::RaySceneQueryResult& objArray)
{
	return m_pAllAppImpl->isHitApp_AA(objArray);
}

void 
Aabridge::onUninstalledApp(gkHashedString& pckName)	// 卸载完成的回调
{
	return m_pAllAppImpl->onUninstalledApp(pckName);
}

