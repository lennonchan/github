//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : HaSettingsViewImpl.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "HaSettingsViewImpl.h"
#include "LauncherScene.h"
#include "Block.h"
HaSettingsViewImpl* HaSettingsViewImpl::mInstance = NULL;

HaSettingsViewImpl::HaSettingsViewImpl():m_pBlock(NULL),m_pAppsVector(NULL)
{
 	m_pSettingsview = new HaSettingsView();
	setRootView(m_pSettingsview);
	setBackgroundView(m_pSettingsview);
	if(!mInstance)
	{
		mInstance = this;
	}
	m_pSettingsview->setFocus(0);
	m_pAppsVector = new vector<AppUnit*>();
}

HaSettingsViewImpl::~HaSettingsViewImpl() 
{
 	ui_delete(m_pSettingsview);
	ui_delete(m_pAppsVector);
}

HaSettingsViewImpl* 
HaSettingsViewImpl::getInstance()
{
	return mInstance?mInstance:new HaSettingsViewImpl();
}

vector<AppUnit*>*  
HaSettingsViewImpl::getAppsList()
{
	return m_pAppsVector;
}
//bool 
//HaSettingsViewImpl::addPlateApp(AppUnit* pApp)
//{
//	//if(app->不可添加到当前模块)
//	// return false;
//	int pn = pApp->getPlateName();
//	pApp->setPlateName(pn);
//	m_pSettingsview->showNodeFlag(pApp);
//
//	return true;
//}
//
//void 
//HaSettingsViewImpl::cutPlateApp(AppUnit* pApp)
//{
//	if(pApp->getPlateName()&m_CurrPlateName)
//	{
//		int pn = pApp->getPlateName();
//		pn ^= m_CurrPlateName;
//		pApp->setPlateName(pn);
//		m_pSettingsview->hideNodeFlag(pApp);
//	}
//}
//
//bool 
//HaSettingsViewImpl::setNodeSelectedFlag(AppUnit* pApp,bool flag)
//{
//	return flag?:;
//}

//ePlateName 
//HaSettingsViewImpl::getCurrentPlateName()
//{
//	return m_CurrPlateName;
//}
//
//void 
//HaSettingsViewImpl::setCurrentPlateName(ePlateName pn)
//{
//	m_CurrPlateName = pn;
//}

void HaSettingsViewImpl::onTick(gkScalar time)
{
	AaAppsViewImpl::onTick(time);
	m_pSettingsview->onTick(time);
}
AppUnit* 
HaSettingsViewImpl::isHitApp_HA(Ogre::RaySceneQueryResult& objArray)
{
	return(AppUnit*)(m_pSettingsview->isHitViewNode(objArray));
}

void 
HaSettingsViewImpl::setViewVisible(Block* pObj,bool vsb)
{
	AaAppsViewImpl::setViewVisible(vsb);
	LauncherScene::getInstance()->finishBlockWholeTranslation();
	vsb?m_pSettingsview->setBlockThumb(pObj):m_pSettingsview->hideBlockThumb();
	m_pBlock = pObj;
}

bool 
HaSettingsViewImpl::MoveViewFocus(RootViewImpl* pPreImpl,eFlyDirection direction)
{
	return true;
}	

void 
HaSettingsViewImpl::onClickViewNode(ViewNode* pNode)
{

}

void 
HaSettingsViewImpl::onLoseFocus()
{

}

bool 
HaSettingsViewImpl::setHomeAppTag(AppUnit* pApp)			// 
{
	if (!m_pBlock || !pApp)
		return false;
	if(pApp->getPlateName()>>_LAUNCHER_HOMEAPP_POS_BITNUM_ == 0 &&
		m_pBlock->getVacantPosID() > 0)
	{
		pApp->setPlateName(m_pBlock->getVacantPosID());
		if(m_pBlock->setAppByIndex(m_pBlock->getVacantPosID(),pApp))
			pApp->setHeartVisible(true);
		return true;
	}
	else if (pApp->getPlateName()>>_LAUNCHER_HOMEAPP_POS_BITNUM_ == 
		m_pBlock->getVacantPosParentID())
	{
		AppUnitShortcut* pAppShortcut = m_pBlock->getShortcutByApp(pApp);
		pApp->setPlateName(0);
		pApp->setHeartVisible(false);
		if(pAppShortcut)
		{
			m_pBlock->setAppByIndex(pAppShortcut->getMinIndex(),NULL);
			m_pBlock->tidyApps(pAppShortcut);
		}
		else
		{
			return setHomeAppTag(pApp);
		}
		return true;
	}
	else if(m_pBlock->getVacantPosID() == -1)
	{
		m_pSettingsview->showWarningDialog();
	}
	return false;
}

void 
HaSettingsViewImpl::syncAppVector()
{
	m_pAppsVector->clear();
	vector<AppUnit*>* pAppsVector = AaAppsViewImpl::getAppsList();
	if(!pAppsVector)
		return;
	int size = pAppsVector->size();
	gkGameObject* pObj = NULL;
	for (int i = 0;i<size;i++)
	{	pObj = pAppsVector->at(i)->getGameObj();
		if(pObj&&pObj->getVisible())
			m_pAppsVector->push_back(pAppsVector->at(i));
	}
}