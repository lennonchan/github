//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Link.h
//  @ Date : 2012-11-6
//  @ Author : 
//
//


#if !defined(_VIEWNODE_H)
#define _VIEWNODE_H

#include <gkScene.h>
#include <gkGameObject.h>

class BlenderAnimation;
class BlenderAnmInterface;
class ViewNode{
private:
	struct sViewNodeAnm 
	{
		BlenderAnimation* mpAnm;
		int mArrayShowFrame[2];
		int mArrayHideFrame[2];

		sViewNodeAnm(BlenderAnimation* pAnm,int showStart = 0,int showEnd = 0,int hideStart = 0,int hideEnd = 0,BlenderAnmInterface* pInterface = NULL);
		void setShowScope(int starts,int ends);
		void setHideScope(int starts,int ends);
		void setInterface(BlenderAnmInterface* pInterface);
		void showViewNodeAnm();
		void hideViewNodeAnm();
	};
public:
	ViewNode(gkScene*,const gkHashedString&);
	~ViewNode();
	gkGameObject* getGameObj();
	 void setGameObj(gkGameObject*);
	void gameObjectTranslation(gkVector3 v);
	const gkVector3 getPosition();
	const gkVector3& getScale();
	int getMinIndex();
	int getMaxIndex();
	int* getIndex();
	ViewNode* setMinIndex(int i);
	ViewNode* setMaxIndex(int i);
	ViewNode* setIndex(int i0,int i1);
	
	void setViewNodeBldAnm(BlenderAnimation* pAnm,int showStart = 0,int showEnd = 0,int hideStart = 0,int hideEnd = 0,BlenderAnmInterface* pInterface = NULL);
	void showViewNodeBldAnm();
	void hideViewNodeBldAnm();

private:
	int*		 m_pIndex;
	gkScene*	  m_pScene;
	gkGameObject* m_pObj;
	sViewNodeAnm* m_pNodeAnm;
protected:
	int		  m_MinIndex;
	int		  m_MaxIndex;
};

#endif  //_VIEWNODE_H
