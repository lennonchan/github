//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AaAppsViewImpl.cpp
//  @ Date : 2012-11-20
//  @ Author : 
//
//


#include "AaAppsViewImpl.h"
#include "Sort.h"
#include "GameObjMaker.h"
#include "FocusMovePath.h"
#include "AppsViewUtil.h"
#include "gkEntity.h"

AppUnit::AppTextureUnit* AaAppsViewImpl::pAppTextureUnit = NULL;
AaAppsViewImpl::AaAppsViewImpl():m_AaAppsView(NULL),m_sortType(ST_NAME),m_pViewUtil(NULL)
{
	m_ParentRawPos = gkVector3(0,0,0);
	m_pViewUtil = AppsViewUtil::getInstance();
 	if(!pAppTextureUnit)
 		pAppTextureUnit = new AppUnit::AppTextureUnit();
}

AaAppsViewImpl::~AaAppsViewImpl() 
{
	ui_delete(pAppTextureUnit);
}

vector<AppUnit*>*  
AaAppsViewImpl::getAppsList()
{
	_ASSERT_(m_pDataBase);
	return m_pDataBase->getAppsVector();
}

bool 
AaAppsViewImpl::appSort(eSortord st)
{
	if(m_sortType == st)
		return false;
	m_sortType = st;
	switch(st)
	{
	case ST_FREQUENCE:
		Sort::sortbyfrequence(*(m_pDataBase->getAppsVector()));
		//m_pDataBase->appInverted();
		break;
	case ST_NAME:
		Sort::sortbyname(*(m_pDataBase->getAppsVector()));
		break;
	case ST_DEFAULT:
	default:
		Sort::sortbydefault(*(m_pDataBase->getAppsVector()));
		break;
	}

	return true;
}

eSortord 
AaAppsViewImpl::getSortord()
{
	return m_sortType;
}

bool 
AaAppsViewImpl::update()
{
	vector<AppUnit*>* pVector = getAppsList();
	GameObjMaker::adjustGameObjPos(pVector,m_AaAppsView->getParentNode()->getGameObj());

	return true;
}

void 
AaAppsViewImpl::onTick(gkScalar time)
{
	m_AaAppsView->upDateAnm(time);
}

bool 
AaAppsViewImpl::isInvolvedViewNode(ViewNode* pNode)
{
	vector<AppUnit*>* pVector = getAppsList();
	int size = pVector->size();
	AppUnit* pApp = NULL;

	for (int i = 0;i<size;i++)
	{
		pApp = pVector->at(i);
		if (pApp == pNode)
		{
			return true;
		}
	}

	return false;
}

void 
AaAppsViewImpl::setMoveVector(gkVector3 gVector,bool anm)
{
	_ASSERT_(m_AaAppsView);
	m_AaAppsView->setMoveVector(gVector,anm);
}

int 
AaAppsViewImpl::getAppNum()
{
	_ASSERT_(m_pDataBase);
	return m_pDataBase->getAppsNum();
}

int 
AaAppsViewImpl::getNodeVindex(ViewNode* pNode)
{
	if(!pNode)
	{
		return -2;
	}
	AppUnit* pApp = (AppUnit*)pNode;
	vector<AppUnit*>* pVList = getAppsList();
	for (unsigned int i = 0;i < pVList->size();i++)
	{
		if(pVList->at(i) == pApp)
			return i;
	}

	return -1;
}

void 
AaAppsViewImpl::onInstalledApp(tcl::AppDataInfo& info)		// 安装完成的回调
{
	AppUnit* pApp = new AppUnit(info);
	m_pDataBase->addApp(pApp);

	appSort(m_sortType);
	update();

	return ;
}

void 
AaAppsViewImpl::onUninstalledApp(gkHashedString& pckName)		// 卸载完成的回调
{
	AppUnit* pApp = NULL;
	vector<AppUnit*>::iterator it=getAppsList()->begin();

	for (int i = 0;i<m_pDataBase->getAppsNum();i++,it++)
	{
		if(pckName == (*getAppsList())[i]->getPackageName())
		{
			pApp = (*getAppsList())[i];
			getAppsList()->erase(it);
			ui_delete(pApp);
			break;
		}
	}

	return ;
}

void 
AaAppsViewImpl::setBackgroundView(AaAppsView* pAaAppView)
{
	m_AaAppsView = pAaAppView;
	m_pDataBase = m_AaAppsView->getDataBase();
	m_ParentRawPos = m_AaAppsView->getParentNode()->getGameObj()->getPosition();
	setRootView(pAaAppView);
}

AaAppsView* 
AaAppsViewImpl::getRootView()
{
	return m_AaAppsView;
}

bool 
AaAppsViewImpl::moveFocus(eFlyDirection direct)	// 移动focus
{
	if(m_AaAppsView->getStickFocus())
		return true;
	int vindex = getNodeVindex(m_AaAppsView->getFocus());

	_ASSERT_((vindex != -1));
	
	if(-2 == vindex)	// 数据库里面没有应用
	{
		gkPrint("no app in database!\n");
		return true;
	}
	AppUnit * pApp = FocusMovePath::getNextFocusNode_AaBack(getAppsList(),vindex,direct,_APP_COLNUM_);
	if(!pApp || pApp == m_AaAppsView->getFocus())
	{
		return false;
	}
	//gkVector3 pos = p->getGameObj()->getWorldPosition();
	eFlyDirection epos = m_pViewUtil->getNodePosInClip(getNodeVindex(pApp));
	if(NON != epos)
	{
		m_pViewUtil->nRowScroll(epos,1,true);
		m_AaAppsView->setStickFocus(pApp);
		return true;
	}
	else
	{
		return m_AaAppsView->setFocus(pApp);
	}
	
}

bool 
AaAppsViewImpl::MoveViewFocus(RootViewImpl* pPreImpl,eFlyDirection direction)
{
	switch(direction)
	{
	case RIGHT:
		m_AaAppsView->setFocus(m_pViewUtil->getCurrentFirstNode());
		break;
	case LEFT:
		m_pDataBase->getAppsNum()<_APP_COLNUM_?m_AaAppsView->setFocus(m_pDataBase->getAppsNum()-1):m_AaAppsView->setFocus(_APP_COLNUM_-1);
		break;
	}

	return true;
}

bool 
AaAppsViewImpl::setViewNodeFocus(ViewNode* pNode)		// 设置viewNode* 为当前focus
{
	_ASSERT_(m_AaAppsView);
	return pNode?m_AaAppsView->setFocus(pNode):true;
}

ViewNode* 
AaAppsViewImpl::getCurrentViewNode()
{
	_ASSERT_(m_AaAppsView);
	return m_AaAppsView->getFocus();
}

void 
AaAppsViewImpl::onLoseFocus()
{
	
}

void 
AaAppsViewImpl::syncTextureFromJava()
{
	vector<AppUnit*>* pVector = getAppsList();
	if(!pVector)
		return;
	unsigned int iSize = pVector->size();
	for (unsigned int i = 0;i<iSize;i++)
	{
		pAppTextureUnit->showTexture(pVector->at(i));
	}

	//pAppTextureUnit->showTexture(getAppsList()->at(27));
	//pAppTextureUnit->setEntityTextureID(_APP_ICON_INDEX_,1);
}

gkVector3 
AaAppsViewImpl::getParentPos()
{
	return m_AaAppsView->getParentNode()->getGameObj()->getPosition();
}

gkVector3 
AaAppsViewImpl::getParentRawPos()
{
	return m_ParentRawPos;
}

gkVector3 
AaAppsViewImpl::getParentScale()
{
	return m_AaAppsView->getParentNode()->getGameObj()->getScale();
}
